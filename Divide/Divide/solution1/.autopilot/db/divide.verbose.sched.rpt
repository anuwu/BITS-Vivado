

================================================================
== Vivado HLS Report for 'divide'
================================================================
* Date:           Mon May 18 11:05:50 2020

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        Divide
* Solution:       solution1
* Product family: virtex7
* Target device:  xc7vx485t-ffg1157-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 6.259 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max   | min | max |   Type  |
    +---------+---------+-----------+----------+-----+-----+---------+
    |        1|       17| 10.000 ns | 0.170 us |    1|   17|   none  |
    +---------+---------+-----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |          |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |- Loop 1  |       16|       16|         2|          -|          -|     8|    no    |
        +----------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 2 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.23>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8 %N) nounwind, !map !7"   --->   Operation 4 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8 %D) nounwind, !map !13"   --->   Operation 5 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %Q) nounwind, !map !17"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %R) nounwind, !map !23"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @divide_str) nounwind"   --->   Operation 8 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%D_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %D) nounwind" [Divide/div.cpp:1]   --->   Operation 9 'read' 'D_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%N_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %N) nounwind" [Divide/div.cpp:1]   --->   Operation 10 'read' 'N_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (1.12ns)   --->   "%icmp_ln3 = icmp eq i8 %D_read, 0" [Divide/div.cpp:3]   --->   Operation 11 'icmp' 'icmp_ln3' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.12> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "br i1 %icmp_ln3, label %.loopexit, label %1" [Divide/div.cpp:3]   --->   Operation 12 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%R_load = alloca i8"   --->   Operation 13 'alloca' 'R_load' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%Q_load = alloca i8"   --->   Operation 14 'alloca' 'Q_load' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %Q, i8 0) nounwind" [Divide/div.cpp:5]   --->   Operation 15 'write' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %R, i8 0) nounwind" [Divide/div.cpp:6]   --->   Operation 16 'write' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (1.18ns)   --->   "store i8 0, i8* %Q_load" [Divide/div.cpp:8]   --->   Operation 17 'store' <Predicate = (!icmp_ln3)> <Delay = 1.18>
ST_1 : Operation 18 [1/1] (1.23ns)   --->   "store i8 0, i8* %R_load" [Divide/div.cpp:8]   --->   Operation 18 'store' <Predicate = (!icmp_ln3)> <Delay = 1.23>
ST_1 : Operation 19 [1/1] (1.18ns)   --->   "br label %2" [Divide/div.cpp:8]   --->   Operation 19 'br' <Predicate = (!icmp_ln3)> <Delay = 1.18>

State 2 <SV = 1> <Delay = 6.25>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%i_0 = phi i4 [ 7, %1 ], [ %i, %._crit_edge ]"   --->   Operation 20 'phi' 'i_0' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%sext_ln8 = sext i4 %i_0 to i8" [Divide/div.cpp:8]   --->   Operation 21 'sext' 'sext_ln8' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%tmp = call i1 @_ssdm_op_BitSelect.i1.i4.i32(i4 %i_0, i32 3)" [Divide/div.cpp:8]   --->   Operation 22 'bitselect' 'tmp' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8) nounwind"   --->   Operation 23 'speclooptripcount' 'empty' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "br i1 %tmp, label %.loopexit.loopexit, label %3" [Divide/div.cpp:8]   --->   Operation 24 'br' <Predicate = (!icmp_ln3)> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%R_load_1 = load i8* %R_load" [Divide/div.cpp:14]   --->   Operation 25 'load' 'R_load_1' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 0.00>
ST_2 : Operation 26 [1/1] (1.61ns)   --->   "%shl_ln12 = shl i8 1, %sext_ln8" [Divide/div.cpp:12]   --->   Operation 26 'shl' 'shl_ln12' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 1.61> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.01> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 27 [1/1] (0.00ns) (grouped into LUT with out node iBitN)   --->   "%and_ln12 = and i8 %shl_ln12, %N_read" [Divide/div.cpp:12]   --->   Operation 27 'and' 'and_ln12' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 28 [1/1] (2.01ns) (out node of the LUT)   --->   "%iBitN = lshr i8 %and_ln12, %sext_ln8" [Divide/div.cpp:12]   --->   Operation 28 'lshr' 'iBitN' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 2.01> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.01> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%trunc_ln14 = trunc i8 %iBitN to i1" [Divide/div.cpp:14]   --->   Operation 29 'trunc' 'trunc_ln14' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%trunc_ln14_1 = trunc i8 %R_load_1 to i7" [Divide/div.cpp:14]   --->   Operation 30 'trunc' 'trunc_ln14_1' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 0.00>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%or_ln = call i8 @_ssdm_op_BitConcatenate.i8.i7.i1(i7 %trunc_ln14_1, i1 %trunc_ln14)" [Divide/div.cpp:14]   --->   Operation 31 'bitconcatenate' 'or_ln' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 0.00>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %R, i8 %or_ln) nounwind" [Divide/div.cpp:14]   --->   Operation 32 'write' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (1.12ns)   --->   "%icmp_ln16 = icmp ult i8 %or_ln, %D_read" [Divide/div.cpp:16]   --->   Operation 33 'icmp' 'icmp_ln16' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.12> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "br i1 %icmp_ln16, label %.._crit_edge_crit_edge, label %4" [Divide/div.cpp:16]   --->   Operation 34 'br' <Predicate = (!icmp_ln3 & !tmp)> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%Q_load_1 = load i8* %Q_load" [Divide/div.cpp:19]   --->   Operation 35 'load' 'Q_load_1' <Predicate = (!icmp_ln3 & !tmp & !icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 36 [1/1] (1.39ns)   --->   "%sub_ln18 = sub i8 %or_ln, %D_read" [Divide/div.cpp:18]   --->   Operation 36 'sub' 'sub_ln18' <Predicate = (!icmp_ln3 & !tmp & !icmp_ln16)> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (0.66ns)   --->   "%or_ln19 = or i8 %Q_load_1, %shl_ln12" [Divide/div.cpp:19]   --->   Operation 37 'or' 'or_ln19' <Predicate = (!icmp_ln3 & !tmp & !icmp_ln16)> <Delay = 0.66> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %Q, i8 %or_ln19) nounwind" [Divide/div.cpp:19]   --->   Operation 38 'write' <Predicate = (!icmp_ln3 & !tmp & !icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (1.18ns)   --->   "store i8 %or_ln19, i8* %Q_load" [Divide/div.cpp:20]   --->   Operation 39 'store' <Predicate = (!icmp_ln3 & !tmp & !icmp_ln16)> <Delay = 1.18>
ST_2 : Operation 40 [1/1] (1.23ns)   --->   "store i8 %sub_ln18, i8* %R_load" [Divide/div.cpp:20]   --->   Operation 40 'store' <Predicate = (!icmp_ln3 & !tmp & !icmp_ln16)> <Delay = 1.23>
ST_2 : Operation 41 [1/1] (1.23ns)   --->   "store i8 %or_ln, i8* %R_load" [Divide/div.cpp:16]   --->   Operation 41 'store' <Predicate = (!icmp_ln3 & !tmp & icmp_ln16)> <Delay = 1.23>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "br label %._crit_edge" [Divide/div.cpp:16]   --->   Operation 42 'br' <Predicate = (!icmp_ln3 & !tmp & icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "br label %.loopexit"   --->   Operation 43 'br' <Predicate = (!icmp_ln3 & tmp)> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "ret void" [Divide/div.cpp:23]   --->   Operation 44 'ret' <Predicate = (tmp) | (icmp_ln3)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.36>
ST_3 : Operation 45 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i8P(i8* %R, i8 %sub_ln18) nounwind" [Divide/div.cpp:18]   --->   Operation 45 'write' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_3 : Operation 46 [1/1] (0.00ns)   --->   "br label %._crit_edge" [Divide/div.cpp:20]   --->   Operation 46 'br' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (1.36ns)   --->   "%i = add i4 %i_0, -1" [Divide/div.cpp:8]   --->   Operation 47 'add' 'i' <Predicate = true> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "br label %2" [Divide/div.cpp:8]   --->   Operation 48 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.24ns
The critical path consists of the following:
	'alloca' operation ('R_load') [15]  (0 ns)
	'store' operation ('store_ln8', Divide/div.cpp:8) of constant 0 on local variable 'R_load' [20]  (1.24 ns)

 <State 2>: 6.26ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', Divide/div.cpp:8) [23]  (0 ns)
	'shl' operation ('shl_ln12', Divide/div.cpp:12) [30]  (1.62 ns)
	'and' operation ('and_ln12', Divide/div.cpp:12) [31]  (0 ns)
	'lshr' operation ('iBitN', Divide/div.cpp:12) [32]  (2.01 ns)
	'sub' operation ('sub_ln18', Divide/div.cpp:18) [41]  (1.39 ns)
	'store' operation ('store_ln20', Divide/div.cpp:20) of variable 'sub_ln18', Divide/div.cpp:18 on local variable 'R_load' [46]  (1.24 ns)

 <State 3>: 1.36ns
The critical path consists of the following:
	'add' operation ('i', Divide/div.cpp:8) [52]  (1.36 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
