-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity divide is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    N : IN STD_LOGIC_VECTOR (7 downto 0);
    D : IN STD_LOGIC_VECTOR (7 downto 0);
    Q : OUT STD_LOGIC_VECTOR (7 downto 0);
    Q_ap_vld : OUT STD_LOGIC;
    R : OUT STD_LOGIC_VECTOR (7 downto 0);
    R_ap_vld : OUT STD_LOGIC );
end;


architecture behav of divide is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "divide,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.258700,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=194,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln3_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_reg_203 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_225 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_106_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln18_fu_159_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln18_reg_229 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_reg_74 : STD_LOGIC_VECTOR (3 downto 0);
    signal R_load_fu_38 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_142_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Q_load_fu_42 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln19_fu_164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln8_fu_102_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln12_fu_117_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln12_fu_123_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal iBitN_fu_128_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln14_1_fu_138_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln14_fu_134_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    Q_load_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln16_fu_151_p2 = ap_const_lv1_0) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Q_load_fu_42 <= or_ln19_fu_164_p2;
            elsif (((ap_start = ap_const_logic_1) and (icmp_ln3_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Q_load_fu_42 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    R_load_fu_38_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln16_fu_151_p2 = ap_const_lv1_1) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                R_load_fu_38 <= or_ln_fu_142_p3;
            elsif (((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln16_fu_151_p2 = ap_const_lv1_0) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                R_load_fu_38 <= sub_ln18_fu_159_p2;
            elsif (((ap_start = ap_const_logic_1) and (icmp_ln3_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                R_load_fu_38 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_74 <= i_fu_186_p2;
            elsif (((ap_start = ap_const_logic_1) and (icmp_ln3_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_74 <= ap_const_lv4_7;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln16_reg_225 <= icmp_ln16_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln3_reg_203 <= icmp_ln3_fu_86_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln16_fu_151_p2 = ap_const_lv1_0) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln18_reg_229 <= sub_ln18_fu_159_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln3_reg_203, ap_CS_fsm_state2, tmp_fu_106_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_106_p3 = ap_const_lv1_1) or (icmp_ln3_reg_203 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    Q_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln3_fu_86_p2, icmp_ln3_reg_203, icmp_ln16_fu_151_p2, ap_CS_fsm_state2, tmp_fu_106_p3, or_ln19_fu_164_p2)
    begin
        if (((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln16_fu_151_p2 = ap_const_lv1_0) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Q <= or_ln19_fu_164_p2;
        elsif (((ap_start = ap_const_logic_1) and (icmp_ln3_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Q <= ap_const_lv8_0;
        else 
            Q <= "XXXXXXXX";
        end if; 
    end process;


    Q_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln3_fu_86_p2, icmp_ln3_reg_203, icmp_ln16_fu_151_p2, ap_CS_fsm_state2, tmp_fu_106_p3)
    begin
        if ((((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln16_fu_151_p2 = ap_const_lv1_0) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (icmp_ln3_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            Q_ap_vld <= ap_const_logic_1;
        else 
            Q_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    R_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln3_fu_86_p2, icmp_ln3_reg_203, icmp_ln16_reg_225, ap_CS_fsm_state2, tmp_fu_106_p3, sub_ln18_reg_229, ap_CS_fsm_state3, or_ln_fu_142_p3)
    begin
        if (((icmp_ln16_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            R <= sub_ln18_reg_229;
        elsif (((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            R <= or_ln_fu_142_p3;
        elsif (((ap_start = ap_const_logic_1) and (icmp_ln3_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R <= ap_const_lv8_0;
        else 
            R <= "XXXXXXXX";
        end if; 
    end process;


    R_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln3_fu_86_p2, icmp_ln3_reg_203, icmp_ln16_reg_225, ap_CS_fsm_state2, tmp_fu_106_p3, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln16_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_fu_106_p3 = ap_const_lv1_0) and (icmp_ln3_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (icmp_ln3_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            R_ap_vld <= ap_const_logic_1;
        else 
            R_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    and_ln12_fu_123_p2 <= (shl_ln12_fu_117_p2 and N);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(icmp_ln3_reg_203, ap_CS_fsm_state2, tmp_fu_106_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_106_p3 = ap_const_lv1_1) or (icmp_ln3_reg_203 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln3_reg_203, ap_CS_fsm_state2, tmp_fu_106_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_106_p3 = ap_const_lv1_1) or (icmp_ln3_reg_203 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    iBitN_fu_128_p2 <= std_logic_vector(shift_right(unsigned(and_ln12_fu_123_p2),to_integer(unsigned('0' & sext_ln8_fu_102_p1(8-1 downto 0)))));
    i_fu_186_p2 <= std_logic_vector(signed(i_0_reg_74) + signed(ap_const_lv4_F));
    icmp_ln16_fu_151_p2 <= "1" when (unsigned(or_ln_fu_142_p3) < unsigned(D)) else "0";
    icmp_ln3_fu_86_p2 <= "1" when (D = ap_const_lv8_0) else "0";
    or_ln19_fu_164_p2 <= (shl_ln12_fu_117_p2 or Q_load_fu_42);
    or_ln_fu_142_p3 <= (trunc_ln14_1_fu_138_p1 & trunc_ln14_fu_134_p1);
        sext_ln8_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_74),8));

    shl_ln12_fu_117_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & sext_ln8_fu_102_p1(8-1 downto 0)))));
    sub_ln18_fu_159_p2 <= std_logic_vector(unsigned(or_ln_fu_142_p3) - unsigned(D));
    tmp_fu_106_p3 <= i_0_reg_74(3 downto 3);
    trunc_ln14_1_fu_138_p1 <= R_load_fu_38(7 - 1 downto 0);
    trunc_ln14_fu_134_p1 <= iBitN_fu_128_p2(1 - 1 downto 0);
end behav;
