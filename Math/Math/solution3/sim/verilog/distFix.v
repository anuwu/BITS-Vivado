// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="distFix,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.645250,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1476,HLS_SYN_LUT=6784,HLS_VERSION=2019_2}" *)

module distFix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x1_V,
        y1_V,
        x2_V,
        y2_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] x1_V;
input  [15:0] y1_V;
input  [15:0] x2_V;
input  [15:0] y2_V;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [33:0] r_V_4_fu_101_p2;
reg  signed [33:0] r_V_4_reg_114;
wire  signed [33:0] grp_fu_107_p3;
reg   [33:0] ret_V_2_reg_119;
wire    ap_CS_fsm_state2;
wire   [28:0] grp_sqrt_fixed_35_13_s_fu_50_ap_return;
wire    ap_CS_fsm_state3;
wire  signed [16:0] lhs_V_fu_55_p1;
wire  signed [16:0] rhs_V_fu_59_p1;
wire   [16:0] ret_V_fu_63_p2;
wire  signed [16:0] lhs_V_1_fu_73_p1;
wire  signed [16:0] rhs_V_1_fu_77_p1;
wire   [16:0] ret_V_1_fu_81_p2;
wire    ap_CS_fsm_state16;
wire  signed [16:0] r_V_4_fu_101_p0;
wire  signed [33:0] r_V_fu_69_p1;
wire  signed [16:0] r_V_4_fu_101_p1;
wire  signed [16:0] grp_fu_107_p0;
wire  signed [33:0] r_V_2_fu_87_p1;
wire  signed [16:0] grp_fu_107_p1;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

sqrt_fixed_35_13_s grp_sqrt_fixed_35_13_s_fu_50(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(ret_V_2_reg_119),
    .ap_return(grp_sqrt_fixed_35_13_s_fu_50_ap_return)
);

distFix_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
distFix_mul_mul_1bkb_U2(
    .din0(r_V_4_fu_101_p0),
    .din1(r_V_4_fu_101_p1),
    .dout(r_V_4_fu_101_p2)
);

distFix_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 34 ))
distFix_mac_muladcud_U3(
    .din0(grp_fu_107_p0),
    .din1(grp_fu_107_p1),
    .din2(r_V_4_reg_114),
    .dout(grp_fu_107_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_4_reg_114 <= r_V_4_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ret_V_2_reg_119 <= grp_fu_107_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = {{grp_sqrt_fixed_35_13_s_fu_50_ap_return[26:11]}};

assign grp_fu_107_p0 = r_V_2_fu_87_p1;

assign grp_fu_107_p1 = r_V_2_fu_87_p1;

assign lhs_V_1_fu_73_p1 = $signed(y2_V);

assign lhs_V_fu_55_p1 = $signed(x2_V);

assign r_V_2_fu_87_p1 = $signed(ret_V_1_fu_81_p2);

assign r_V_4_fu_101_p0 = r_V_fu_69_p1;

assign r_V_4_fu_101_p1 = r_V_fu_69_p1;

assign r_V_fu_69_p1 = $signed(ret_V_fu_63_p2);

assign ret_V_1_fu_81_p2 = ($signed(lhs_V_1_fu_73_p1) - $signed(rhs_V_1_fu_77_p1));

assign ret_V_fu_63_p2 = ($signed(lhs_V_fu_55_p1) - $signed(rhs_V_fu_59_p1));

assign rhs_V_1_fu_77_p1 = $signed(y1_V);

assign rhs_V_fu_59_p1 = $signed(x1_V);

endmodule //distFix
