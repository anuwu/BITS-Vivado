// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _distFix_HH_
#define _distFix_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sqrt_fixed_35_13_s.h"
#include "distFix_mul_mul_1bkb.h"
#include "distFix_mac_muladcud.h"

namespace ap_rtl {

struct distFix : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > x1_V;
    sc_in< sc_lv<16> > y1_V;
    sc_in< sc_lv<16> > x2_V;
    sc_in< sc_lv<16> > y2_V;
    sc_out< sc_lv<16> > ap_return;


    // Module declarations
    distFix(sc_module_name name);
    SC_HAS_PROCESS(distFix);

    ~distFix();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sqrt_fixed_35_13_s* grp_sqrt_fixed_35_13_s_fu_50;
    distFix_mul_mul_1bkb<1,1,17,17,34>* distFix_mul_mul_1bkb_U2;
    distFix_mac_muladcud<1,1,17,17,34,34>* distFix_mac_muladcud_U3;
    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<34> > r_V_4_fu_101_p2;
    sc_signal< sc_lv<34> > r_V_4_reg_114;
    sc_signal< sc_lv<34> > grp_fu_107_p3;
    sc_signal< sc_lv<34> > ret_V_2_reg_119;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<29> > grp_sqrt_fixed_35_13_s_fu_50_ap_return;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<17> > lhs_V_fu_55_p1;
    sc_signal< sc_lv<17> > rhs_V_fu_59_p1;
    sc_signal< sc_lv<17> > ret_V_fu_63_p2;
    sc_signal< sc_lv<17> > lhs_V_1_fu_73_p1;
    sc_signal< sc_lv<17> > rhs_V_1_fu_77_p1;
    sc_signal< sc_lv<17> > ret_V_1_fu_81_p2;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<17> > r_V_4_fu_101_p0;
    sc_signal< sc_lv<34> > r_V_fu_69_p1;
    sc_signal< sc_lv<17> > r_V_4_fu_101_p1;
    sc_signal< sc_lv<17> > grp_fu_107_p0;
    sc_signal< sc_lv<34> > r_V_2_fu_87_p1;
    sc_signal< sc_lv<17> > grp_fu_107_p1;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_fsm_state1;
    static const sc_lv<16> ap_ST_fsm_state2;
    static const sc_lv<16> ap_ST_fsm_state3;
    static const sc_lv<16> ap_ST_fsm_state4;
    static const sc_lv<16> ap_ST_fsm_state5;
    static const sc_lv<16> ap_ST_fsm_state6;
    static const sc_lv<16> ap_ST_fsm_state7;
    static const sc_lv<16> ap_ST_fsm_state8;
    static const sc_lv<16> ap_ST_fsm_state9;
    static const sc_lv<16> ap_ST_fsm_state10;
    static const sc_lv<16> ap_ST_fsm_state11;
    static const sc_lv<16> ap_ST_fsm_state12;
    static const sc_lv<16> ap_ST_fsm_state13;
    static const sc_lv<16> ap_ST_fsm_state14;
    static const sc_lv<16> ap_ST_fsm_state15;
    static const sc_lv<16> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_fu_107_p0();
    void thread_grp_fu_107_p1();
    void thread_lhs_V_1_fu_73_p1();
    void thread_lhs_V_fu_55_p1();
    void thread_r_V_2_fu_87_p1();
    void thread_r_V_4_fu_101_p0();
    void thread_r_V_4_fu_101_p1();
    void thread_r_V_fu_69_p1();
    void thread_ret_V_1_fu_81_p2();
    void thread_ret_V_fu_63_p2();
    void thread_rhs_V_1_fu_77_p1();
    void thread_rhs_V_fu_59_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
