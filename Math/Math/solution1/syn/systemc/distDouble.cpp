// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "distDouble.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic distDouble::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic distDouble::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<69> distDouble::ap_ST_fsm_state1 = "1";
const sc_lv<69> distDouble::ap_ST_fsm_state2 = "10";
const sc_lv<69> distDouble::ap_ST_fsm_state3 = "100";
const sc_lv<69> distDouble::ap_ST_fsm_state4 = "1000";
const sc_lv<69> distDouble::ap_ST_fsm_state5 = "10000";
const sc_lv<69> distDouble::ap_ST_fsm_state6 = "100000";
const sc_lv<69> distDouble::ap_ST_fsm_state7 = "1000000";
const sc_lv<69> distDouble::ap_ST_fsm_state8 = "10000000";
const sc_lv<69> distDouble::ap_ST_fsm_state9 = "100000000";
const sc_lv<69> distDouble::ap_ST_fsm_state10 = "1000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state11 = "10000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state12 = "100000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> distDouble::ap_ST_fsm_state69 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> distDouble::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> distDouble::ap_const_lv32_4 = "100";
const sc_lv<32> distDouble::ap_const_lv32_2F = "101111";
const sc_lv<32> distDouble::ap_const_lv32_2A = "101010";
const sc_lv<32> distDouble::ap_const_lv32_5 = "101";
const sc_lv<32> distDouble::ap_const_lv32_2B = "101011";
const sc_lv<32> distDouble::ap_const_lv32_30 = "110000";
const sc_lv<2> distDouble::ap_const_lv2_0 = "00";
const sc_lv<2> distDouble::ap_const_lv2_1 = "1";
const sc_lv<32> distDouble::ap_const_lv32_44 = "1000100";
const sc_lv<64> distDouble::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool distDouble::ap_const_boolean_1 = true;

distDouble::distDouble(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_pow_generic_double_s_fu_70 = new pow_generic_double_s("grp_pow_generic_double_s_fu_70");
    grp_pow_generic_double_s_fu_70->ap_clk(ap_clk);
    grp_pow_generic_double_s_fu_70->ap_rst(ap_rst);
    grp_pow_generic_double_s_fu_70->ap_start(grp_pow_generic_double_s_fu_70_ap_start);
    grp_pow_generic_double_s_fu_70->ap_done(grp_pow_generic_double_s_fu_70_ap_done);
    grp_pow_generic_double_s_fu_70->ap_idle(grp_pow_generic_double_s_fu_70_ap_idle);
    grp_pow_generic_double_s_fu_70->ap_ready(grp_pow_generic_double_s_fu_70_ap_ready);
    grp_pow_generic_double_s_fu_70->base_r(reg_145);
    grp_pow_generic_double_s_fu_70->ap_return(grp_pow_generic_double_s_fu_70_ap_return);
    grp_pow_generic_double_s_fu_99 = new pow_generic_double_s("grp_pow_generic_double_s_fu_99");
    grp_pow_generic_double_s_fu_99->ap_clk(ap_clk);
    grp_pow_generic_double_s_fu_99->ap_rst(ap_rst);
    grp_pow_generic_double_s_fu_99->ap_start(grp_pow_generic_double_s_fu_99_ap_start);
    grp_pow_generic_double_s_fu_99->ap_done(grp_pow_generic_double_s_fu_99_ap_done);
    grp_pow_generic_double_s_fu_99->ap_idle(grp_pow_generic_double_s_fu_99_ap_idle);
    grp_pow_generic_double_s_fu_99->ap_ready(grp_pow_generic_double_s_fu_99_ap_ready);
    grp_pow_generic_double_s_fu_99->base_r(x_assign_1_reg_171);
    grp_pow_generic_double_s_fu_99->ap_return(grp_pow_generic_double_s_fu_99_ap_return);
    distDouble_dadddsyd2_U36 = new distDouble_dadddsyd2<1,5,64,64,64>("distDouble_dadddsyd2_U36");
    distDouble_dadddsyd2_U36->clk(ap_clk);
    distDouble_dadddsyd2_U36->reset(ap_rst);
    distDouble_dadddsyd2_U36->din0(grp_fu_128_p0);
    distDouble_dadddsyd2_U36->din1(grp_fu_128_p1);
    distDouble_dadddsyd2_U36->opcode(grp_fu_128_opcode);
    distDouble_dadddsyd2_U36->ce(ap_var_for_const0);
    distDouble_dadddsyd2_U36->dout(grp_fu_128_p2);
    distDouble_dsub_6zec_U37 = new distDouble_dsub_6zec<1,5,64,64,64>("distDouble_dsub_6zec_U37");
    distDouble_dsub_6zec_U37->clk(ap_clk);
    distDouble_dsub_6zec_U37->reset(ap_rst);
    distDouble_dsub_6zec_U37->din0(y2);
    distDouble_dsub_6zec_U37->din1(y1);
    distDouble_dsub_6zec_U37->ce(ap_var_for_const0);
    distDouble_dsub_6zec_U37->dout(grp_fu_134_p2);
    distDouble_dsqrt_Aem_U38 = new distDouble_dsqrt_Aem<1,21,64,64,64>("distDouble_dsqrt_Aem_U38");
    distDouble_dsqrt_Aem_U38->clk(ap_clk);
    distDouble_dsqrt_Aem_U38->reset(ap_rst);
    distDouble_dsqrt_Aem_U38->din0(ap_var_for_const1);
    distDouble_dsqrt_Aem_U38->din1(reg_145);
    distDouble_dsqrt_Aem_U38->ce(ap_var_for_const0);
    distDouble_dsqrt_Aem_U38->dout(grp_fu_140_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state69);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state6);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state69 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state69 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_fu_140_p2 );
    sensitive << ( ap_CS_fsm_state69 );

    SC_METHOD(thread_grp_fu_128_opcode);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_grp_fu_128_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x2 );
    sensitive << ( tmp_i_reg_176 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_grp_fu_128_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x1 );
    sensitive << ( tmp_i1_reg_181 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_grp_pow_generic_double_s_fu_70_ap_start);
    sensitive << ( grp_pow_generic_double_s_fu_70_ap_start_reg );

    SC_METHOD(thread_grp_pow_generic_double_s_fu_99_ap_start);
    sensitive << ( grp_pow_generic_double_s_fu_99_ap_start_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000000000000000000001";
    grp_pow_generic_double_s_fu_70_ap_start_reg = SC_LOGIC_0;
    grp_pow_generic_double_s_fu_99_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "distDouble_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x1, "(port)x1");
    sc_trace(mVcdFile, y1, "(port)y1");
    sc_trace(mVcdFile, x2, "(port)x2");
    sc_trace(mVcdFile, y2, "(port)y2");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_128_p2, "grp_fu_128_p2");
    sc_trace(mVcdFile, reg_145, "reg_145");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, grp_fu_134_p2, "grp_fu_134_p2");
    sc_trace(mVcdFile, x_assign_1_reg_171, "x_assign_1_reg_171");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_70_ap_return, "grp_pow_generic_double_s_fu_70_ap_return");
    sc_trace(mVcdFile, tmp_i_reg_176, "tmp_i_reg_176");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_99_ap_return, "grp_pow_generic_double_s_fu_99_ap_return");
    sc_trace(mVcdFile, tmp_i1_reg_181, "tmp_i1_reg_181");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_70_ap_start, "grp_pow_generic_double_s_fu_70_ap_start");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_70_ap_done, "grp_pow_generic_double_s_fu_70_ap_done");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_70_ap_idle, "grp_pow_generic_double_s_fu_70_ap_idle");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_70_ap_ready, "grp_pow_generic_double_s_fu_70_ap_ready");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_99_ap_start, "grp_pow_generic_double_s_fu_99_ap_start");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_99_ap_done, "grp_pow_generic_double_s_fu_99_ap_done");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_99_ap_idle, "grp_pow_generic_double_s_fu_99_ap_idle");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_99_ap_ready, "grp_pow_generic_double_s_fu_99_ap_ready");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_70_ap_start_reg, "grp_pow_generic_double_s_fu_70_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state6, "ap_NS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_pow_generic_double_s_fu_99_ap_start_reg, "grp_pow_generic_double_s_fu_99_ap_start_reg");
    sc_trace(mVcdFile, grp_fu_128_p0, "grp_fu_128_p0");
    sc_trace(mVcdFile, grp_fu_128_p1, "grp_fu_128_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, grp_fu_128_opcode, "grp_fu_128_opcode");
    sc_trace(mVcdFile, grp_fu_140_p2, "grp_fu_140_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state69, "ap_CS_fsm_state69");
#endif

    }
    mHdltvinHandle.open("distDouble.hdltvin.dat");
    mHdltvoutHandle.open("distDouble.hdltvout.dat");
}

distDouble::~distDouble() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_pow_generic_double_s_fu_70;
    delete grp_pow_generic_double_s_fu_99;
    delete distDouble_dadddsyd2_U36;
    delete distDouble_dsub_6zec_U37;
    delete distDouble_dsqrt_Aem_U38;
}

void distDouble::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void distDouble::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_0;
}

void distDouble::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_pow_generic_double_s_fu_70_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state6.read()))) {
            grp_pow_generic_double_s_fu_70_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_pow_generic_double_s_fu_70_ap_ready.read())) {
            grp_pow_generic_double_s_fu_70_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_pow_generic_double_s_fu_99_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state6.read()))) {
            grp_pow_generic_double_s_fu_99_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_pow_generic_double_s_fu_99_ap_ready.read())) {
            grp_pow_generic_double_s_fu_99_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        reg_145 = grp_fu_128_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        tmp_i1_reg_181 = grp_pow_generic_double_s_fu_99_ap_return.read();
        tmp_i_reg_176 = grp_pow_generic_double_s_fu_70_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        x_assign_1_reg_171 = grp_fu_134_p2.read();
    }
}

void distDouble::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void distDouble::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void distDouble::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void distDouble::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void distDouble::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void distDouble::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void distDouble::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void distDouble::thread_ap_CS_fsm_state69() {
    ap_CS_fsm_state69 = ap_CS_fsm.read()[68];
}

void distDouble::thread_ap_NS_fsm_state6() {
    ap_NS_fsm_state6 = ap_NS_fsm.read()[5];
}

void distDouble::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void distDouble::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void distDouble::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void distDouble::thread_ap_return() {
    ap_return = grp_fu_140_p2.read();
}

void distDouble::thread_grp_fu_128_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        grp_fu_128_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        grp_fu_128_opcode = ap_const_lv2_0;
    } else {
        grp_fu_128_opcode = "XX";
    }
}

void distDouble::thread_grp_fu_128_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        grp_fu_128_p0 = tmp_i_reg_176.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_128_p0 = x2.read();
    } else {
        grp_fu_128_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void distDouble::thread_grp_fu_128_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        grp_fu_128_p1 = tmp_i1_reg_181.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_128_p1 = x1.read();
    } else {
        grp_fu_128_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void distDouble::thread_grp_pow_generic_double_s_fu_70_ap_start() {
    grp_pow_generic_double_s_fu_70_ap_start = grp_pow_generic_double_s_fu_70_ap_start_reg.read();
}

void distDouble::thread_grp_pow_generic_double_s_fu_99_ap_start() {
    grp_pow_generic_double_s_fu_99_ap_start = grp_pow_generic_double_s_fu_99_ap_start_reg.read();
}

void distDouble::thread_ap_NS_fsm() {
    if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        ap_NS_fsm = ap_ST_fsm_state3;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        ap_NS_fsm = ap_ST_fsm_state4;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        ap_NS_fsm = ap_ST_fsm_state12;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        ap_NS_fsm = ap_ST_fsm_state52;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        ap_NS_fsm = ap_ST_fsm_state62;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        ap_NS_fsm = ap_ST_fsm_state68;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        ap_NS_fsm = ap_ST_fsm_state1;
    }
    else
    {
        ap_NS_fsm =  (sc_lv<69>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
void distDouble::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x1\" :  \"" << x1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y1\" :  \"" << y1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x2\" :  \"" << x2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y2\" :  \"" << y2.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

