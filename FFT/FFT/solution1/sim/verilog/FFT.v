// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FFT,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.604000,HLS_SYN_LAT=561,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=997,HLS_SYN_LUT=1769,HLS_VERSION=2019_2}" *)

module FFT (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_IN_TDATA,
        data_IN_TVALID,
        data_IN_TREADY,
        data_OUT_TDATA,
        data_OUT_TVALID,
        data_OUT_TREADY
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data_IN_TDATA;
input   data_IN_TVALID;
output   data_IN_TREADY;
output  [31:0] data_OUT_TDATA;
output   data_OUT_TVALID;
input   data_OUT_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_IN_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] xin_M_real_V_address0;
reg    xin_M_real_V_ce0;
reg    xin_M_real_V_we0;
wire   [15:0] xin_M_real_V_d0;
wire   [15:0] xin_M_real_V_q0;
reg   [4:0] xin_M_imag_V_address0;
reg    xin_M_imag_V_ce0;
reg    xin_M_imag_V_we0;
wire   [15:0] xin_M_imag_V_d0;
wire   [15:0] xin_M_imag_V_q0;
wire   [4:0] rev_32_address0;
reg    rev_32_ce0;
wire   [4:0] rev_32_q0;
reg   [4:0] data_OUT0_M_real_V_address0;
reg    data_OUT0_M_real_V_ce0;
reg    data_OUT0_M_real_V_we0;
wire   [15:0] data_OUT0_M_real_V_q0;
reg   [4:0] data_OUT0_M_imag_V_address0;
reg    data_OUT0_M_imag_V_ce0;
reg    data_OUT0_M_imag_V_we0;
wire   [15:0] data_OUT0_M_imag_V_q0;
reg   [4:0] data_OUT1_M_real_V_address0;
reg    data_OUT1_M_real_V_ce0;
reg    data_OUT1_M_real_V_we0;
wire   [15:0] data_OUT1_M_real_V_q0;
reg   [4:0] data_OUT1_M_imag_V_address0;
reg    data_OUT1_M_imag_V_ce0;
reg    data_OUT1_M_imag_V_we0;
wire   [15:0] data_OUT1_M_imag_V_q0;
reg   [4:0] data_OUT2_M_real_V_address0;
reg    data_OUT2_M_real_V_ce0;
reg    data_OUT2_M_real_V_we0;
wire   [15:0] data_OUT2_M_real_V_q0;
reg   [4:0] data_OUT2_M_imag_V_address0;
reg    data_OUT2_M_imag_V_ce0;
reg    data_OUT2_M_imag_V_we0;
wire   [15:0] data_OUT2_M_imag_V_q0;
reg   [4:0] data_OUT3_M_real_V_address0;
reg    data_OUT3_M_real_V_ce0;
reg    data_OUT3_M_real_V_we0;
wire   [15:0] data_OUT3_M_real_V_q0;
reg   [4:0] data_OUT3_M_imag_V_address0;
reg    data_OUT3_M_imag_V_ce0;
reg    data_OUT3_M_imag_V_we0;
wire   [15:0] data_OUT3_M_imag_V_q0;
reg   [4:0] data_OUT4_M_real_V_address0;
reg    data_OUT4_M_real_V_ce0;
reg    data_OUT4_M_real_V_we0;
wire   [15:0] data_OUT4_M_real_V_q0;
reg   [4:0] data_OUT4_M_imag_V_address0;
reg    data_OUT4_M_imag_V_ce0;
reg    data_OUT4_M_imag_V_we0;
wire   [15:0] data_OUT4_M_imag_V_q0;
reg   [4:0] xout_M_real_V_address0;
reg    xout_M_real_V_ce0;
reg    xout_M_real_V_we0;
wire   [15:0] xout_M_real_V_q0;
reg   [4:0] xout_M_imag_V_address0;
reg    xout_M_imag_V_ce0;
reg    xout_M_imag_V_we0;
wire   [15:0] xout_M_imag_V_q0;
reg    data_IN_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln58_fu_317_p2;
reg    data_OUT_TDATA_blk_n;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [5:0] i_fu_323_p2;
reg    ap_block_state2;
wire   [5:0] i_1_fu_357_p2;
reg   [5:0] i_1_reg_412;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln18_fu_363_p1;
reg   [63:0] zext_ln18_reg_417;
wire   [0:0] icmp_ln17_fu_351_p2;
wire    ap_CS_fsm_state4;
wire   [5:0] i_2_fu_380_p2;
reg   [5:0] i_2_reg_441;
wire    ap_CS_fsm_state15;
wire    regslice_both_data_OUT_U_apdone_blk;
wire   [0:0] icmp_ln68_fu_374_p2;
wire    grp_FFT0_fu_261_ap_start;
wire    grp_FFT0_fu_261_ap_done;
wire    grp_FFT0_fu_261_ap_idle;
wire    grp_FFT0_fu_261_ap_ready;
reg   [5:0] grp_FFT0_fu_261_FFT_stage;
reg   [5:0] grp_FFT0_fu_261_pass_check;
reg   [3:0] grp_FFT0_fu_261_index_shift;
reg   [3:0] grp_FFT0_fu_261_pass_shift;
wire   [4:0] grp_FFT0_fu_261_data_IN_M_real_V_address0;
wire    grp_FFT0_fu_261_data_IN_M_real_V_ce0;
reg   [15:0] grp_FFT0_fu_261_data_IN_M_real_V_q0;
wire   [4:0] grp_FFT0_fu_261_data_IN_M_imag_V_address0;
wire    grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
reg   [15:0] grp_FFT0_fu_261_data_IN_M_imag_V_q0;
wire   [4:0] grp_FFT0_fu_261_data_OUT_M_real_V_address0;
wire    grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
wire    grp_FFT0_fu_261_data_OUT_M_real_V_we0;
wire   [15:0] grp_FFT0_fu_261_data_OUT_M_real_V_d0;
wire   [4:0] grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
wire    grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
wire    grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
wire   [15:0] grp_FFT0_fu_261_data_OUT_M_imag_V_d0;
reg   [5:0] i_0_reg_228;
reg   [5:0] i_0_i_reg_239;
wire    ap_CS_fsm_state5;
reg   [5:0] i1_0_reg_250;
wire    ap_CS_fsm_state14;
reg    grp_FFT0_fu_261_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln58_fu_329_p1;
wire   [63:0] zext_ln19_fu_368_p1;
wire   [63:0] zext_ln68_fu_386_p1;
reg   [16:0] ap_NS_fsm;
wire    regslice_both_data_IN_U_apdone_blk;
wire   [31:0] data_IN_TDATA_int;
wire    data_IN_TVALID_int;
reg    data_IN_TREADY_int;
wire    regslice_both_data_IN_U_ack_in;
wire   [31:0] data_OUT_TDATA_int;
reg    data_OUT_TVALID_int;
wire    data_OUT_TREADY_int;
wire    regslice_both_data_OUT_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 grp_FFT0_fu_261_ap_start_reg = 1'b0;
end

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xin_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xin_M_real_V_address0),
    .ce0(xin_M_real_V_ce0),
    .we0(xin_M_real_V_we0),
    .d0(xin_M_real_V_d0),
    .q0(xin_M_real_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xin_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xin_M_imag_V_address0),
    .ce0(xin_M_imag_V_ce0),
    .we0(xin_M_imag_V_we0),
    .d0(xin_M_imag_V_d0),
    .q0(xin_M_imag_V_q0)
);

FFT_rev_32 #(
    .DataWidth( 5 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
rev_32_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rev_32_address0),
    .ce0(rev_32_ce0),
    .q0(rev_32_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT0_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT0_M_real_V_address0),
    .ce0(data_OUT0_M_real_V_ce0),
    .we0(data_OUT0_M_real_V_we0),
    .d0(xin_M_real_V_q0),
    .q0(data_OUT0_M_real_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT0_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT0_M_imag_V_address0),
    .ce0(data_OUT0_M_imag_V_ce0),
    .we0(data_OUT0_M_imag_V_we0),
    .d0(xin_M_imag_V_q0),
    .q0(data_OUT0_M_imag_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT1_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT1_M_real_V_address0),
    .ce0(data_OUT1_M_real_V_ce0),
    .we0(data_OUT1_M_real_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_real_V_d0),
    .q0(data_OUT1_M_real_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT1_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT1_M_imag_V_address0),
    .ce0(data_OUT1_M_imag_V_ce0),
    .we0(data_OUT1_M_imag_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_imag_V_d0),
    .q0(data_OUT1_M_imag_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT2_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT2_M_real_V_address0),
    .ce0(data_OUT2_M_real_V_ce0),
    .we0(data_OUT2_M_real_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_real_V_d0),
    .q0(data_OUT2_M_real_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT2_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT2_M_imag_V_address0),
    .ce0(data_OUT2_M_imag_V_ce0),
    .we0(data_OUT2_M_imag_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_imag_V_d0),
    .q0(data_OUT2_M_imag_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT3_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT3_M_real_V_address0),
    .ce0(data_OUT3_M_real_V_ce0),
    .we0(data_OUT3_M_real_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_real_V_d0),
    .q0(data_OUT3_M_real_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT3_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT3_M_imag_V_address0),
    .ce0(data_OUT3_M_imag_V_ce0),
    .we0(data_OUT3_M_imag_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_imag_V_d0),
    .q0(data_OUT3_M_imag_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT4_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT4_M_real_V_address0),
    .ce0(data_OUT4_M_real_V_ce0),
    .we0(data_OUT4_M_real_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_real_V_d0),
    .q0(data_OUT4_M_real_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
data_OUT4_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_OUT4_M_imag_V_address0),
    .ce0(data_OUT4_M_imag_V_ce0),
    .we0(data_OUT4_M_imag_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_imag_V_d0),
    .q0(data_OUT4_M_imag_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xout_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xout_M_real_V_address0),
    .ce0(xout_M_real_V_ce0),
    .we0(xout_M_real_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_real_V_d0),
    .q0(xout_M_real_V_q0)
);

FFT_xin_M_real_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
xout_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xout_M_imag_V_address0),
    .ce0(xout_M_imag_V_ce0),
    .we0(xout_M_imag_V_we0),
    .d0(grp_FFT0_fu_261_data_OUT_M_imag_V_d0),
    .q0(xout_M_imag_V_q0)
);

FFT0 grp_FFT0_fu_261(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FFT0_fu_261_ap_start),
    .ap_done(grp_FFT0_fu_261_ap_done),
    .ap_idle(grp_FFT0_fu_261_ap_idle),
    .ap_ready(grp_FFT0_fu_261_ap_ready),
    .FFT_stage(grp_FFT0_fu_261_FFT_stage),
    .pass_check(grp_FFT0_fu_261_pass_check),
    .index_shift(grp_FFT0_fu_261_index_shift),
    .pass_shift(grp_FFT0_fu_261_pass_shift),
    .data_IN_M_real_V_address0(grp_FFT0_fu_261_data_IN_M_real_V_address0),
    .data_IN_M_real_V_ce0(grp_FFT0_fu_261_data_IN_M_real_V_ce0),
    .data_IN_M_real_V_q0(grp_FFT0_fu_261_data_IN_M_real_V_q0),
    .data_IN_M_imag_V_address0(grp_FFT0_fu_261_data_IN_M_imag_V_address0),
    .data_IN_M_imag_V_ce0(grp_FFT0_fu_261_data_IN_M_imag_V_ce0),
    .data_IN_M_imag_V_q0(grp_FFT0_fu_261_data_IN_M_imag_V_q0),
    .data_OUT_M_real_V_address0(grp_FFT0_fu_261_data_OUT_M_real_V_address0),
    .data_OUT_M_real_V_ce0(grp_FFT0_fu_261_data_OUT_M_real_V_ce0),
    .data_OUT_M_real_V_we0(grp_FFT0_fu_261_data_OUT_M_real_V_we0),
    .data_OUT_M_real_V_d0(grp_FFT0_fu_261_data_OUT_M_real_V_d0),
    .data_OUT_M_imag_V_address0(grp_FFT0_fu_261_data_OUT_M_imag_V_address0),
    .data_OUT_M_imag_V_ce0(grp_FFT0_fu_261_data_OUT_M_imag_V_ce0),
    .data_OUT_M_imag_V_we0(grp_FFT0_fu_261_data_OUT_M_imag_V_we0),
    .data_OUT_M_imag_V_d0(grp_FFT0_fu_261_data_OUT_M_imag_V_d0)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data_IN_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_IN_TDATA),
    .vld_in(data_IN_TVALID),
    .ack_in(regslice_both_data_IN_U_ack_in),
    .data_out(data_IN_TDATA_int),
    .vld_out(data_IN_TVALID_int),
    .ack_out(data_IN_TREADY_int),
    .apdone_blk(regslice_both_data_IN_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data_OUT_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_OUT_TDATA_int),
    .vld_in(data_OUT_TVALID_int),
    .ack_in(data_OUT_TREADY_int),
    .data_out(data_OUT_TDATA),
    .vld_out(regslice_both_data_OUT_U_vld_out),
    .ack_out(data_OUT_TREADY),
    .apdone_blk(regslice_both_data_OUT_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FFT0_fu_261_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | ((icmp_ln17_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_FFT0_fu_261_ap_start_reg <= 1'b1;
        end else if ((grp_FFT0_fu_261_ap_ready == 1'b1)) begin
            grp_FFT0_fu_261_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((data_OUT_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        i1_0_reg_250 <= i_2_reg_441;
    end else if (((grp_FFT0_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        i1_0_reg_250 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln58_fu_317_p2 == 1'd1))) begin
        i_0_i_reg_239 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_i_reg_239 <= i_1_reg_412;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln58_fu_317_p2 == 1'd0))) begin
        i_0_reg_228 <= i_fu_323_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_228 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_412 <= i_1_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        i_2_reg_441 <= i_2_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln17_fu_351_p2 == 1'd0))) begin
        zext_ln18_reg_417[5 : 0] <= zext_ln18_fu_363_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_374_p2 == 1'd1) & (regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_374_p2 == 1'd1) & (regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln58_fu_317_p2 == 1'd0))) begin
        data_IN_TDATA_blk_n = data_IN_TVALID_int;
    end else begin
        data_IN_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_data_IN_U_ack_in == 1'b1) & (data_IN_TVALID == 1'b1))) begin
        data_IN_TREADY = 1'b1;
    end else begin
        data_IN_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln58_fu_317_p2 == 1'd0))) begin
        data_IN_TREADY_int = 1'b1;
    end else begin
        data_IN_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT0_M_imag_V_address0 = zext_ln18_reg_417;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_imag_V_address0 = grp_FFT0_fu_261_data_IN_M_imag_V_address0;
    end else begin
        data_OUT0_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT0_M_imag_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_imag_V_ce0 = grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
    end else begin
        data_OUT0_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT0_M_imag_V_we0 = 1'b1;
    end else begin
        data_OUT0_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT0_M_real_V_address0 = zext_ln18_reg_417;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_real_V_address0 = grp_FFT0_fu_261_data_IN_M_real_V_address0;
    end else begin
        data_OUT0_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT0_M_real_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT0_M_real_V_ce0 = grp_FFT0_fu_261_data_IN_M_real_V_ce0;
    end else begin
        data_OUT0_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT0_M_real_V_we0 = 1'b1;
    end else begin
        data_OUT0_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT1_M_imag_V_address0 = grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT1_M_imag_V_address0 = grp_FFT0_fu_261_data_IN_M_imag_V_address0;
    end else begin
        data_OUT1_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT1_M_imag_V_ce0 = grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT1_M_imag_V_ce0 = grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
    end else begin
        data_OUT1_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT1_M_imag_V_we0 = grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
    end else begin
        data_OUT1_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT1_M_real_V_address0 = grp_FFT0_fu_261_data_OUT_M_real_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT1_M_real_V_address0 = grp_FFT0_fu_261_data_IN_M_real_V_address0;
    end else begin
        data_OUT1_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT1_M_real_V_ce0 = grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT1_M_real_V_ce0 = grp_FFT0_fu_261_data_IN_M_real_V_ce0;
    end else begin
        data_OUT1_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_OUT1_M_real_V_we0 = grp_FFT0_fu_261_data_OUT_M_real_V_we0;
    end else begin
        data_OUT1_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT2_M_imag_V_address0 = grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT2_M_imag_V_address0 = grp_FFT0_fu_261_data_IN_M_imag_V_address0;
    end else begin
        data_OUT2_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT2_M_imag_V_ce0 = grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT2_M_imag_V_ce0 = grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
    end else begin
        data_OUT2_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT2_M_imag_V_we0 = grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
    end else begin
        data_OUT2_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT2_M_real_V_address0 = grp_FFT0_fu_261_data_OUT_M_real_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT2_M_real_V_address0 = grp_FFT0_fu_261_data_IN_M_real_V_address0;
    end else begin
        data_OUT2_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT2_M_real_V_ce0 = grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT2_M_real_V_ce0 = grp_FFT0_fu_261_data_IN_M_real_V_ce0;
    end else begin
        data_OUT2_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_OUT2_M_real_V_we0 = grp_FFT0_fu_261_data_OUT_M_real_V_we0;
    end else begin
        data_OUT2_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT3_M_imag_V_address0 = grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT3_M_imag_V_address0 = grp_FFT0_fu_261_data_IN_M_imag_V_address0;
    end else begin
        data_OUT3_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT3_M_imag_V_ce0 = grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT3_M_imag_V_ce0 = grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
    end else begin
        data_OUT3_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT3_M_imag_V_we0 = grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
    end else begin
        data_OUT3_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT3_M_real_V_address0 = grp_FFT0_fu_261_data_OUT_M_real_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT3_M_real_V_address0 = grp_FFT0_fu_261_data_IN_M_real_V_address0;
    end else begin
        data_OUT3_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT3_M_real_V_ce0 = grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT3_M_real_V_ce0 = grp_FFT0_fu_261_data_IN_M_real_V_ce0;
    end else begin
        data_OUT3_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        data_OUT3_M_real_V_we0 = grp_FFT0_fu_261_data_OUT_M_real_V_we0;
    end else begin
        data_OUT3_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT4_M_imag_V_address0 = grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_OUT4_M_imag_V_address0 = grp_FFT0_fu_261_data_IN_M_imag_V_address0;
    end else begin
        data_OUT4_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT4_M_imag_V_ce0 = grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_OUT4_M_imag_V_ce0 = grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
    end else begin
        data_OUT4_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT4_M_imag_V_we0 = grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
    end else begin
        data_OUT4_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT4_M_real_V_address0 = grp_FFT0_fu_261_data_OUT_M_real_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_OUT4_M_real_V_address0 = grp_FFT0_fu_261_data_IN_M_real_V_address0;
    end else begin
        data_OUT4_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT4_M_real_V_ce0 = grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_OUT4_M_real_V_ce0 = grp_FFT0_fu_261_data_IN_M_real_V_ce0;
    end else begin
        data_OUT4_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_OUT4_M_real_V_we0 = grp_FFT0_fu_261_data_OUT_M_real_V_we0;
    end else begin
        data_OUT4_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        data_OUT_TDATA_blk_n = data_OUT_TREADY_int;
    end else begin
        data_OUT_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_OUT_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        data_OUT_TVALID_int = 1'b1;
    end else begin
        data_OUT_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_FFT0_fu_261_FFT_stage = 6'd16;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_FFT0_fu_261_FFT_stage = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_FFT0_fu_261_FFT_stage = 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_FFT0_fu_261_FFT_stage = 6'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_FFT0_fu_261_FFT_stage = 6'd1;
    end else begin
        grp_FFT0_fu_261_FFT_stage = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_FFT0_fu_261_data_IN_M_imag_V_q0 = data_OUT4_M_imag_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_FFT0_fu_261_data_IN_M_imag_V_q0 = data_OUT3_M_imag_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_FFT0_fu_261_data_IN_M_imag_V_q0 = data_OUT2_M_imag_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_FFT0_fu_261_data_IN_M_imag_V_q0 = data_OUT1_M_imag_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_FFT0_fu_261_data_IN_M_imag_V_q0 = data_OUT0_M_imag_V_q0;
    end else begin
        grp_FFT0_fu_261_data_IN_M_imag_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_FFT0_fu_261_data_IN_M_real_V_q0 = data_OUT4_M_real_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_FFT0_fu_261_data_IN_M_real_V_q0 = data_OUT3_M_real_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_FFT0_fu_261_data_IN_M_real_V_q0 = data_OUT2_M_real_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_FFT0_fu_261_data_IN_M_real_V_q0 = data_OUT1_M_real_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_FFT0_fu_261_data_IN_M_real_V_q0 = data_OUT0_M_real_V_q0;
    end else begin
        grp_FFT0_fu_261_data_IN_M_real_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_FFT0_fu_261_index_shift = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_FFT0_fu_261_index_shift = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_FFT0_fu_261_index_shift = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_FFT0_fu_261_index_shift = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_FFT0_fu_261_index_shift = 4'd4;
    end else begin
        grp_FFT0_fu_261_index_shift = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_FFT0_fu_261_pass_check = 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_FFT0_fu_261_pass_check = 6'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_FFT0_fu_261_pass_check = 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_FFT0_fu_261_pass_check = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_FFT0_fu_261_pass_check = 6'd16;
    end else begin
        grp_FFT0_fu_261_pass_check = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_FFT0_fu_261_pass_shift = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_FFT0_fu_261_pass_shift = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_FFT0_fu_261_pass_shift = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_FFT0_fu_261_pass_shift = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_FFT0_fu_261_pass_shift = 4'd1;
    end else begin
        grp_FFT0_fu_261_pass_shift = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rev_32_ce0 = 1'b1;
    end else begin
        rev_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xin_M_imag_V_address0 = zext_ln19_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_M_imag_V_address0 = zext_ln58_fu_329_p1;
    end else begin
        xin_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        xin_M_imag_V_ce0 = 1'b1;
    end else begin
        xin_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln58_fu_317_p2 == 1'd0))) begin
        xin_M_imag_V_we0 = 1'b1;
    end else begin
        xin_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xin_M_real_V_address0 = zext_ln19_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xin_M_real_V_address0 = zext_ln58_fu_329_p1;
    end else begin
        xin_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        xin_M_real_V_ce0 = 1'b1;
    end else begin
        xin_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln58_fu_317_p2 == 1'd0))) begin
        xin_M_real_V_we0 = 1'b1;
    end else begin
        xin_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xout_M_imag_V_address0 = zext_ln68_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xout_M_imag_V_address0 = grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
    end else begin
        xout_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        xout_M_imag_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xout_M_imag_V_ce0 = grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
    end else begin
        xout_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        xout_M_imag_V_we0 = grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
    end else begin
        xout_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xout_M_real_V_address0 = zext_ln68_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xout_M_real_V_address0 = grp_FFT0_fu_261_data_OUT_M_real_V_address0;
    end else begin
        xout_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        xout_M_real_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        xout_M_real_V_ce0 = grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
    end else begin
        xout_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        xout_M_real_V_we0 = grp_FFT0_fu_261_data_OUT_M_real_V_we0;
    end else begin
        xout_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln58_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln58_fu_317_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln17_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_FFT0_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_FFT0_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_FFT0_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_FFT0_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_FFT0_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln68_fu_374_p2 == 1'd1) & (regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_data_OUT_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state15) & (icmp_ln68_fu_374_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((data_OUT_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((data_OUT_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((data_IN_TVALID_int == 1'b0) & (icmp_ln58_fu_317_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_OUT_TDATA_int = {{xout_M_imag_V_q0}, {xout_M_real_V_q0}};

assign data_OUT_TVALID = regslice_both_data_OUT_U_vld_out;

assign grp_FFT0_fu_261_ap_start = grp_FFT0_fu_261_ap_start_reg;

assign i_1_fu_357_p2 = (i_0_i_reg_239 + 6'd1);

assign i_2_fu_380_p2 = (i1_0_reg_250 + 6'd1);

assign i_fu_323_p2 = (i_0_reg_228 + 6'd1);

assign icmp_ln17_fu_351_p2 = ((i_0_i_reg_239 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_317_p2 = ((i_0_reg_228 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_374_p2 = ((i1_0_reg_250 == 6'd32) ? 1'b1 : 1'b0);

assign rev_32_address0 = zext_ln18_fu_363_p1;

assign xin_M_imag_V_d0 = {{data_IN_TDATA_int[31:16]}};

assign xin_M_real_V_d0 = data_IN_TDATA_int[15:0];

assign zext_ln18_fu_363_p1 = i_0_i_reg_239;

assign zext_ln19_fu_368_p1 = rev_32_q0;

assign zext_ln58_fu_329_p1 = i_0_reg_228;

assign zext_ln68_fu_386_p1 = i1_0_reg_250;

always @ (posedge ap_clk) begin
    zext_ln18_reg_417[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //FFT
