// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        FFT_stage,
        pass_check,
        index_shift,
        pass_shift,
        data_IN_M_real_V_address0,
        data_IN_M_real_V_ce0,
        data_IN_M_real_V_q0,
        data_IN_M_imag_V_address0,
        data_IN_M_imag_V_ce0,
        data_IN_M_imag_V_q0,
        data_OUT_M_real_V_address0,
        data_OUT_M_real_V_ce0,
        data_OUT_M_real_V_we0,
        data_OUT_M_real_V_d0,
        data_OUT_M_imag_V_address0,
        data_OUT_M_imag_V_ce0,
        data_OUT_M_imag_V_we0,
        data_OUT_M_imag_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] FFT_stage;
input  [5:0] pass_check;
input  [3:0] index_shift;
input  [3:0] pass_shift;
output  [4:0] data_IN_M_real_V_address0;
output   data_IN_M_real_V_ce0;
input  [15:0] data_IN_M_real_V_q0;
output  [4:0] data_IN_M_imag_V_address0;
output   data_IN_M_imag_V_ce0;
input  [15:0] data_IN_M_imag_V_q0;
output  [4:0] data_OUT_M_real_V_address0;
output   data_OUT_M_real_V_ce0;
output   data_OUT_M_real_V_we0;
output  [15:0] data_OUT_M_real_V_d0;
output  [4:0] data_OUT_M_imag_V_address0;
output   data_OUT_M_imag_V_ce0;
output   data_OUT_M_imag_V_we0;
output  [15:0] data_OUT_M_imag_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] data_IN_M_real_V_address0;
reg data_IN_M_real_V_ce0;
reg[4:0] data_IN_M_imag_V_address0;
reg data_IN_M_imag_V_ce0;
reg[4:0] data_OUT_M_real_V_address0;
reg data_OUT_M_real_V_ce0;
reg data_OUT_M_real_V_we0;
reg[15:0] data_OUT_M_real_V_d0;
reg[4:0] data_OUT_M_imag_V_address0;
reg data_OUT_M_imag_V_ce0;
reg data_OUT_M_imag_V_we0;
reg[15:0] data_OUT_M_imag_V_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] W_M_real_V_address0;
reg    W_M_real_V_ce0;
wire  signed [9:0] W_M_real_V_q0;
wire   [3:0] W_M_imag_V_address0;
reg    W_M_imag_V_ce0;
wire  signed [8:0] W_M_imag_V_q0;
wire   [31:0] pass_shift_cast_fu_219_p1;
reg   [31:0] pass_shift_cast_reg_440;
wire   [31:0] index_shift_cast_fu_223_p1;
reg   [31:0] index_shift_cast_reg_445;
wire   [31:0] FFT_stage_cast1_fu_227_p1;
reg   [31:0] FFT_stage_cast1_reg_450;
wire   [31:0] zext_ln33_fu_241_p1;
reg   [31:0] zext_ln33_reg_455;
wire   [31:0] zext_ln35_fu_255_p1;
reg   [31:0] zext_ln35_reg_460;
wire   [4:0] i_fu_265_p2;
reg   [4:0] i_reg_468;
wire    ap_CS_fsm_state2;
wire  signed [31:0] Ulimit_fu_281_p2;
reg  signed [31:0] Ulimit_reg_473;
wire   [0:0] icmp_ln26_fu_259_p2;
wire  signed [63:0] sext_ln30_1_fu_298_p1;
reg  signed [63:0] sext_ln30_1_reg_488;
wire   [31:0] select_ln33_fu_334_p3;
reg   [31:0] select_ln33_reg_504;
wire   [31:0] butterfly_pass_2_fu_342_p3;
reg   [31:0] butterfly_pass_2_reg_509;
reg   [15:0] data_IN_M_imag_V_lo_reg_514;
wire    ap_CS_fsm_state3;
wire  signed [23:0] sext_ln1118_fu_350_p1;
reg  signed [23:0] sext_ln1118_reg_519;
wire  signed [23:0] sext_ln1118_2_fu_358_p1;
reg  signed [23:0] sext_ln1118_2_reg_524;
wire  signed [23:0] mul_ln700_fu_414_p2;
reg  signed [23:0] mul_ln700_reg_529;
wire  signed [23:0] mul_ln1192_fu_420_p2;
reg  signed [23:0] mul_ln1192_reg_534;
wire  signed [63:0] sext_ln31_fu_362_p1;
reg  signed [63:0] sext_ln31_reg_539;
wire   [15:0] add_ln703_fu_402_p2;
reg   [15:0] add_ln703_reg_555;
wire    ap_CS_fsm_state4;
wire   [15:0] add_ln703_1_fu_408_p2;
reg   [15:0] add_ln703_1_reg_560;
reg   [31:0] butterfly_span_0_reg_186;
wire    ap_CS_fsm_state5;
reg   [31:0] butterfly_pass_0_reg_197;
reg   [4:0] i_0_reg_208;
wire  signed [63:0] sext_ln30_fu_292_p1;
wire   [15:0] sub_ln703_fu_388_p2;
wire   [15:0] sub_ln703_1_fu_395_p2;
wire   [4:0] trunc_ln33_fu_231_p1;
wire   [4:0] add_ln33_fu_235_p2;
wire   [4:0] trunc_ln35_fu_245_p1;
wire   [4:0] add_ln35_fu_249_p2;
wire   [31:0] shl_ln28_fu_276_p2;
wire   [31:0] index_fu_271_p2;
wire   [31:0] Llimit_fu_287_p2;
wire   [0:0] icmp_ln35_fu_315_p2;
wire   [31:0] butterfly_pass_fu_320_p2;
wire   [0:0] icmp_ln33_fu_304_p2;
wire   [31:0] butterfly_span_fu_309_p2;
wire   [31:0] butterfly_pass_1_fu_326_p3;
wire  signed [23:0] grp_fu_426_p3;
wire  signed [23:0] grp_fu_433_p3;
wire   [15:0] p_r_V_fu_370_p4;
wire   [15:0] p_Val2_5_fu_379_p4;
wire  signed [15:0] mul_ln700_fu_414_p1;
wire  signed [23:0] sext_ln1118_1_fu_354_p1;
wire  signed [15:0] mul_ln1192_fu_420_p0;
wire  signed [8:0] grp_fu_426_p0;
wire  signed [15:0] grp_fu_426_p1;
wire  signed [23:0] sext_ln1118_3_fu_367_p1;
wire  signed [9:0] grp_fu_433_p0;
wire  signed [15:0] grp_fu_433_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

FFT0_W_M_real_V #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
W_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_M_real_V_address0),
    .ce0(W_M_real_V_ce0),
    .q0(W_M_real_V_q0)
);

FFT0_W_M_imag_V #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
W_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_M_imag_V_address0),
    .ce0(W_M_imag_V_ce0),
    .q0(W_M_imag_V_q0)
);

FFT_mul_mul_10s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
FFT_mul_mul_10s_1bkb_U1(
    .din0(W_M_real_V_q0),
    .din1(mul_ln700_fu_414_p1),
    .dout(mul_ln700_fu_414_p2)
);

FFT_mul_mul_16s_9cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 24 ))
FFT_mul_mul_16s_9cud_U2(
    .din0(mul_ln1192_fu_420_p0),
    .din1(W_M_imag_V_q0),
    .dout(mul_ln1192_fu_420_p2)
);

FFT_mac_mulsub_9sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
FFT_mac_mulsub_9sdEe_U3(
    .din0(grp_fu_426_p0),
    .din1(grp_fu_426_p1),
    .din2(mul_ln700_reg_529),
    .dout(grp_fu_426_p3)
);

FFT_mac_muladd_10eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
FFT_mac_muladd_10eOg_U4(
    .din0(grp_fu_433_p0),
    .din1(grp_fu_433_p1),
    .din2(mul_ln1192_reg_534),
    .dout(grp_fu_433_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        butterfly_pass_0_reg_197 <= butterfly_pass_2_reg_509;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        butterfly_pass_0_reg_197 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        butterfly_span_0_reg_186 <= select_ln33_reg_504;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        butterfly_span_0_reg_186 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_208 <= i_reg_468;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_208 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        FFT_stage_cast1_reg_450[5 : 0] <= FFT_stage_cast1_fu_227_p1[5 : 0];
        index_shift_cast_reg_445[3 : 0] <= index_shift_cast_fu_223_p1[3 : 0];
        pass_shift_cast_reg_440[3 : 0] <= pass_shift_cast_fu_219_p1[3 : 0];
        zext_ln33_reg_455[4 : 0] <= zext_ln33_fu_241_p1[4 : 0];
        zext_ln35_reg_460[4 : 0] <= zext_ln35_fu_255_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Ulimit_reg_473 <= Ulimit_fu_281_p2;
        butterfly_pass_2_reg_509 <= butterfly_pass_2_fu_342_p3;
        select_ln33_reg_504 <= select_ln33_fu_334_p3;
        sext_ln30_1_reg_488 <= sext_ln30_1_fu_298_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln703_1_reg_560 <= add_ln703_1_fu_408_p2;
        add_ln703_reg_555 <= add_ln703_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_IN_M_imag_V_lo_reg_514 <= data_IN_M_imag_V_q0;
        mul_ln1192_reg_534 <= mul_ln1192_fu_420_p2;
        mul_ln700_reg_529 <= mul_ln700_fu_414_p2;
        sext_ln1118_2_reg_524 <= sext_ln1118_2_fu_358_p1;
        sext_ln1118_reg_519 <= sext_ln1118_fu_350_p1;
        sext_ln31_reg_539 <= sext_ln31_fu_362_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_468 <= i_fu_265_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        W_M_imag_V_ce0 = 1'b1;
    end else begin
        W_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        W_M_real_V_ce0 = 1'b1;
    end else begin
        W_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln26_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_IN_M_imag_V_address0 = sext_ln31_fu_362_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_IN_M_imag_V_address0 = sext_ln30_1_fu_298_p1;
    end else begin
        data_IN_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        data_IN_M_imag_V_ce0 = 1'b1;
    end else begin
        data_IN_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_IN_M_real_V_address0 = sext_ln31_fu_362_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_IN_M_real_V_address0 = sext_ln30_1_fu_298_p1;
    end else begin
        data_IN_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        data_IN_M_real_V_ce0 = 1'b1;
    end else begin
        data_IN_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT_M_imag_V_address0 = sext_ln31_reg_539;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_OUT_M_imag_V_address0 = sext_ln30_1_reg_488;
    end else begin
        data_OUT_M_imag_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        data_OUT_M_imag_V_ce0 = 1'b1;
    end else begin
        data_OUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT_M_imag_V_d0 = add_ln703_1_reg_560;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_OUT_M_imag_V_d0 = sub_ln703_1_fu_395_p2;
    end else begin
        data_OUT_M_imag_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        data_OUT_M_imag_V_we0 = 1'b1;
    end else begin
        data_OUT_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT_M_real_V_address0 = sext_ln31_reg_539;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_OUT_M_real_V_address0 = sext_ln30_1_reg_488;
    end else begin
        data_OUT_M_real_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        data_OUT_M_real_V_ce0 = 1'b1;
    end else begin
        data_OUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_OUT_M_real_V_d0 = add_ln703_reg_555;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_OUT_M_real_V_d0 = sub_ln703_fu_388_p2;
    end else begin
        data_OUT_M_real_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        data_OUT_M_real_V_we0 = 1'b1;
    end else begin
        data_OUT_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln26_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FFT_stage_cast1_fu_227_p1 = FFT_stage;

assign Llimit_fu_287_p2 = ($signed(Ulimit_fu_281_p2) + $signed(FFT_stage_cast1_reg_450));

assign Ulimit_fu_281_p2 = (butterfly_span_0_reg_186 + shl_ln28_fu_276_p2);

assign W_M_imag_V_address0 = sext_ln30_fu_292_p1;

assign W_M_real_V_address0 = sext_ln30_fu_292_p1;

assign add_ln33_fu_235_p2 = ($signed(5'd31) + $signed(trunc_ln33_fu_231_p1));

assign add_ln35_fu_249_p2 = ($signed(5'd31) + $signed(trunc_ln35_fu_245_p1));

assign add_ln703_1_fu_408_p2 = (data_IN_M_imag_V_q0 + p_Val2_5_fu_379_p4);

assign add_ln703_fu_402_p2 = (data_IN_M_real_V_q0 + p_r_V_fu_370_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign butterfly_pass_1_fu_326_p3 = ((icmp_ln35_fu_315_p2[0:0] === 1'b1) ? butterfly_pass_fu_320_p2 : 32'd0);

assign butterfly_pass_2_fu_342_p3 = ((icmp_ln33_fu_304_p2[0:0] === 1'b1) ? butterfly_pass_0_reg_197 : butterfly_pass_1_fu_326_p3);

assign butterfly_pass_fu_320_p2 = (butterfly_pass_0_reg_197 + 32'd1);

assign butterfly_span_fu_309_p2 = (butterfly_span_0_reg_186 + 32'd1);

assign grp_fu_426_p0 = sext_ln1118_2_reg_524;

assign grp_fu_426_p1 = sext_ln1118_3_fu_367_p1;

assign grp_fu_433_p0 = sext_ln1118_reg_519;

assign grp_fu_433_p1 = sext_ln1118_3_fu_367_p1;

assign i_fu_265_p2 = (i_0_reg_208 + 5'd1);

assign icmp_ln26_fu_259_p2 = ((i_0_reg_208 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_304_p2 = (($signed(butterfly_span_0_reg_186) < $signed(zext_ln33_reg_455)) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_315_p2 = (($signed(butterfly_pass_0_reg_197) < $signed(zext_ln35_reg_460)) ? 1'b1 : 1'b0);

assign index_fu_271_p2 = butterfly_span_0_reg_186 << index_shift_cast_reg_445;

assign index_shift_cast_fu_223_p1 = index_shift;

assign mul_ln1192_fu_420_p0 = sext_ln1118_1_fu_354_p1;

assign mul_ln700_fu_414_p1 = sext_ln1118_1_fu_354_p1;

assign p_Val2_5_fu_379_p4 = {{grp_fu_433_p3[23:8]}};

assign p_r_V_fu_370_p4 = {{grp_fu_426_p3[23:8]}};

assign pass_shift_cast_fu_219_p1 = pass_shift;

assign select_ln33_fu_334_p3 = ((icmp_ln33_fu_304_p2[0:0] === 1'b1) ? butterfly_span_fu_309_p2 : 32'd0);

assign sext_ln1118_1_fu_354_p1 = $signed(data_IN_M_real_V_q0);

assign sext_ln1118_2_fu_358_p1 = W_M_imag_V_q0;

assign sext_ln1118_3_fu_367_p1 = $signed(data_IN_M_imag_V_lo_reg_514);

assign sext_ln1118_fu_350_p1 = W_M_real_V_q0;

assign sext_ln30_1_fu_298_p1 = $signed(Llimit_fu_287_p2);

assign sext_ln30_fu_292_p1 = $signed(index_fu_271_p2);

assign sext_ln31_fu_362_p1 = Ulimit_reg_473;

assign shl_ln28_fu_276_p2 = butterfly_pass_0_reg_197 << pass_shift_cast_reg_440;

assign sub_ln703_1_fu_395_p2 = (data_IN_M_imag_V_q0 - p_Val2_5_fu_379_p4);

assign sub_ln703_fu_388_p2 = (data_IN_M_real_V_q0 - p_r_V_fu_370_p4);

assign trunc_ln33_fu_231_p1 = FFT_stage[4:0];

assign trunc_ln35_fu_245_p1 = pass_check[4:0];

assign zext_ln33_fu_241_p1 = add_ln33_fu_235_p2;

assign zext_ln35_fu_255_p1 = add_ln35_fu_249_p2;

always @ (posedge ap_clk) begin
    pass_shift_cast_reg_440[31:4] <= 28'b0000000000000000000000000000;
    index_shift_cast_reg_445[31:4] <= 28'b0000000000000000000000000000;
    FFT_stage_cast1_reg_450[31:6] <= 26'b00000000000000000000000000;
    zext_ln33_reg_455[31:5] <= 27'b000000000000000000000000000;
    zext_ln35_reg_460[31:5] <= 27'b000000000000000000000000000;
end

endmodule //FFT0
