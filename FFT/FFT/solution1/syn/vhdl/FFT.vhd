-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_IN_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    data_IN_TVALID : IN STD_LOGIC;
    data_IN_TREADY : OUT STD_LOGIC;
    data_OUT_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_OUT_TVALID : OUT STD_LOGIC;
    data_OUT_TREADY : IN STD_LOGIC );
end;


architecture behav of FFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFT,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.604000,HLS_SYN_LAT=561,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=997,HLS_SYN_LUT=1769,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xin_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xin_M_real_V_ce0 : STD_LOGIC;
    signal xin_M_real_V_we0 : STD_LOGIC;
    signal xin_M_real_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xin_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xin_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xin_M_imag_V_ce0 : STD_LOGIC;
    signal xin_M_imag_V_we0 : STD_LOGIC;
    signal xin_M_imag_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xin_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rev_32_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rev_32_ce0 : STD_LOGIC;
    signal rev_32_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT0_M_real_V_we0 : STD_LOGIC;
    signal data_OUT0_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT0_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT0_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT0_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT0_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT1_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT1_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT1_M_real_V_we0 : STD_LOGIC;
    signal data_OUT1_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT1_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT1_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT1_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT1_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT2_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT2_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT2_M_real_V_we0 : STD_LOGIC;
    signal data_OUT2_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT2_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT2_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT2_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT2_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT3_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT3_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT3_M_real_V_we0 : STD_LOGIC;
    signal data_OUT3_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT3_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT3_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT3_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT3_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT4_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT4_M_real_V_ce0 : STD_LOGIC;
    signal data_OUT4_M_real_V_we0 : STD_LOGIC;
    signal data_OUT4_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_OUT4_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_OUT4_M_imag_V_ce0 : STD_LOGIC;
    signal data_OUT4_M_imag_V_we0 : STD_LOGIC;
    signal data_OUT4_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xout_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xout_M_real_V_ce0 : STD_LOGIC;
    signal xout_M_real_V_we0 : STD_LOGIC;
    signal xout_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xout_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xout_M_imag_V_ce0 : STD_LOGIC;
    signal xout_M_imag_V_we0 : STD_LOGIC;
    signal xout_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_IN_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln58_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_OUT_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_fu_323_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_1_fu_357_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_412 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln18_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_417 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln17_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_2_fu_380_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_441 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal regslice_both_data_OUT_U_apdone_blk : STD_LOGIC;
    signal icmp_ln68_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_FFT0_fu_261_ap_start : STD_LOGIC;
    signal grp_FFT0_fu_261_ap_done : STD_LOGIC;
    signal grp_FFT0_fu_261_ap_idle : STD_LOGIC;
    signal grp_FFT0_fu_261_ap_ready : STD_LOGIC;
    signal grp_FFT0_fu_261_FFT_stage : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FFT0_fu_261_pass_check : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FFT0_fu_261_index_shift : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FFT0_fu_261_pass_shift : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FFT0_fu_261_data_IN_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_261_data_IN_M_real_V_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_261_data_IN_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_FFT0_fu_261_data_IN_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_261_data_IN_M_imag_V_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_261_data_IN_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_FFT0_fu_261_data_OUT_M_real_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_261_data_OUT_M_real_V_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_261_data_OUT_M_real_V_we0 : STD_LOGIC;
    signal grp_FFT0_fu_261_data_OUT_M_real_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_FFT0_fu_261_data_OUT_M_imag_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_FFT0_fu_261_data_OUT_M_imag_V_ce0 : STD_LOGIC;
    signal grp_FFT0_fu_261_data_OUT_M_imag_V_we0 : STD_LOGIC;
    signal grp_FFT0_fu_261_data_OUT_M_imag_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_228 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_i_reg_239 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i1_0_reg_250 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_FFT0_fu_261_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln58_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal regslice_both_data_IN_U_apdone_blk : STD_LOGIC;
    signal data_IN_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal data_IN_TVALID_int : STD_LOGIC;
    signal data_IN_TREADY_int : STD_LOGIC;
    signal regslice_both_data_IN_U_ack_in : STD_LOGIC;
    signal data_OUT_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal data_OUT_TVALID_int : STD_LOGIC;
    signal data_OUT_TREADY_int : STD_LOGIC;
    signal regslice_both_data_OUT_U_vld_out : STD_LOGIC;

    component FFT0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        FFT_stage : IN STD_LOGIC_VECTOR (5 downto 0);
        pass_check : IN STD_LOGIC_VECTOR (5 downto 0);
        index_shift : IN STD_LOGIC_VECTOR (3 downto 0);
        pass_shift : IN STD_LOGIC_VECTOR (3 downto 0);
        data_IN_M_real_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_real_V_ce0 : OUT STD_LOGIC;
        data_IN_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_IN_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_IN_M_imag_V_ce0 : OUT STD_LOGIC;
        data_IN_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_OUT_M_real_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_real_V_ce0 : OUT STD_LOGIC;
        data_OUT_M_real_V_we0 : OUT STD_LOGIC;
        data_OUT_M_real_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_OUT_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_OUT_M_imag_V_ce0 : OUT STD_LOGIC;
        data_OUT_M_imag_V_we0 : OUT STD_LOGIC;
        data_OUT_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FFT_xin_M_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FFT_rev_32 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    xin_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_M_real_V_address0,
        ce0 => xin_M_real_V_ce0,
        we0 => xin_M_real_V_we0,
        d0 => xin_M_real_V_d0,
        q0 => xin_M_real_V_q0);

    xin_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xin_M_imag_V_address0,
        ce0 => xin_M_imag_V_ce0,
        we0 => xin_M_imag_V_we0,
        d0 => xin_M_imag_V_d0,
        q0 => xin_M_imag_V_q0);

    rev_32_U : component FFT_rev_32
    generic map (
        DataWidth => 5,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rev_32_address0,
        ce0 => rev_32_ce0,
        q0 => rev_32_q0);

    data_OUT0_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT0_M_real_V_address0,
        ce0 => data_OUT0_M_real_V_ce0,
        we0 => data_OUT0_M_real_V_we0,
        d0 => xin_M_real_V_q0,
        q0 => data_OUT0_M_real_V_q0);

    data_OUT0_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT0_M_imag_V_address0,
        ce0 => data_OUT0_M_imag_V_ce0,
        we0 => data_OUT0_M_imag_V_we0,
        d0 => xin_M_imag_V_q0,
        q0 => data_OUT0_M_imag_V_q0);

    data_OUT1_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT1_M_real_V_address0,
        ce0 => data_OUT1_M_real_V_ce0,
        we0 => data_OUT1_M_real_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_real_V_d0,
        q0 => data_OUT1_M_real_V_q0);

    data_OUT1_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT1_M_imag_V_address0,
        ce0 => data_OUT1_M_imag_V_ce0,
        we0 => data_OUT1_M_imag_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_imag_V_d0,
        q0 => data_OUT1_M_imag_V_q0);

    data_OUT2_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT2_M_real_V_address0,
        ce0 => data_OUT2_M_real_V_ce0,
        we0 => data_OUT2_M_real_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_real_V_d0,
        q0 => data_OUT2_M_real_V_q0);

    data_OUT2_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT2_M_imag_V_address0,
        ce0 => data_OUT2_M_imag_V_ce0,
        we0 => data_OUT2_M_imag_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_imag_V_d0,
        q0 => data_OUT2_M_imag_V_q0);

    data_OUT3_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT3_M_real_V_address0,
        ce0 => data_OUT3_M_real_V_ce0,
        we0 => data_OUT3_M_real_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_real_V_d0,
        q0 => data_OUT3_M_real_V_q0);

    data_OUT3_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT3_M_imag_V_address0,
        ce0 => data_OUT3_M_imag_V_ce0,
        we0 => data_OUT3_M_imag_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_imag_V_d0,
        q0 => data_OUT3_M_imag_V_q0);

    data_OUT4_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT4_M_real_V_address0,
        ce0 => data_OUT4_M_real_V_ce0,
        we0 => data_OUT4_M_real_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_real_V_d0,
        q0 => data_OUT4_M_real_V_q0);

    data_OUT4_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_OUT4_M_imag_V_address0,
        ce0 => data_OUT4_M_imag_V_ce0,
        we0 => data_OUT4_M_imag_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_imag_V_d0,
        q0 => data_OUT4_M_imag_V_q0);

    xout_M_real_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xout_M_real_V_address0,
        ce0 => xout_M_real_V_ce0,
        we0 => xout_M_real_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_real_V_d0,
        q0 => xout_M_real_V_q0);

    xout_M_imag_V_U : component FFT_xin_M_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xout_M_imag_V_address0,
        ce0 => xout_M_imag_V_ce0,
        we0 => xout_M_imag_V_we0,
        d0 => grp_FFT0_fu_261_data_OUT_M_imag_V_d0,
        q0 => xout_M_imag_V_q0);

    grp_FFT0_fu_261 : component FFT0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT0_fu_261_ap_start,
        ap_done => grp_FFT0_fu_261_ap_done,
        ap_idle => grp_FFT0_fu_261_ap_idle,
        ap_ready => grp_FFT0_fu_261_ap_ready,
        FFT_stage => grp_FFT0_fu_261_FFT_stage,
        pass_check => grp_FFT0_fu_261_pass_check,
        index_shift => grp_FFT0_fu_261_index_shift,
        pass_shift => grp_FFT0_fu_261_pass_shift,
        data_IN_M_real_V_address0 => grp_FFT0_fu_261_data_IN_M_real_V_address0,
        data_IN_M_real_V_ce0 => grp_FFT0_fu_261_data_IN_M_real_V_ce0,
        data_IN_M_real_V_q0 => grp_FFT0_fu_261_data_IN_M_real_V_q0,
        data_IN_M_imag_V_address0 => grp_FFT0_fu_261_data_IN_M_imag_V_address0,
        data_IN_M_imag_V_ce0 => grp_FFT0_fu_261_data_IN_M_imag_V_ce0,
        data_IN_M_imag_V_q0 => grp_FFT0_fu_261_data_IN_M_imag_V_q0,
        data_OUT_M_real_V_address0 => grp_FFT0_fu_261_data_OUT_M_real_V_address0,
        data_OUT_M_real_V_ce0 => grp_FFT0_fu_261_data_OUT_M_real_V_ce0,
        data_OUT_M_real_V_we0 => grp_FFT0_fu_261_data_OUT_M_real_V_we0,
        data_OUT_M_real_V_d0 => grp_FFT0_fu_261_data_OUT_M_real_V_d0,
        data_OUT_M_imag_V_address0 => grp_FFT0_fu_261_data_OUT_M_imag_V_address0,
        data_OUT_M_imag_V_ce0 => grp_FFT0_fu_261_data_OUT_M_imag_V_ce0,
        data_OUT_M_imag_V_we0 => grp_FFT0_fu_261_data_OUT_M_imag_V_we0,
        data_OUT_M_imag_V_d0 => grp_FFT0_fu_261_data_OUT_M_imag_V_d0);

    regslice_both_data_IN_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_IN_TDATA,
        vld_in => data_IN_TVALID,
        ack_in => regslice_both_data_IN_U_ack_in,
        data_out => data_IN_TDATA_int,
        vld_out => data_IN_TVALID_int,
        ack_out => data_IN_TREADY_int,
        apdone_blk => regslice_both_data_IN_U_apdone_blk);

    regslice_both_data_OUT_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_OUT_TDATA_int,
        vld_in => data_OUT_TVALID_int,
        ack_in => data_OUT_TREADY_int,
        data_out => data_OUT_TDATA,
        vld_out => regslice_both_data_OUT_U_vld_out,
        ack_out => data_OUT_TREADY,
        apdone_blk => regslice_both_data_OUT_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_FFT0_fu_261_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT0_fu_261_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln17_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_FFT0_fu_261_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT0_fu_261_ap_ready = ap_const_logic_1)) then 
                    grp_FFT0_fu_261_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_OUT_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i1_0_reg_250 <= i_2_reg_441;
            elsif (((grp_FFT0_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i1_0_reg_250 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln58_fu_317_p2 = ap_const_lv1_1))) then 
                i_0_i_reg_239 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i_reg_239 <= i_1_reg_412;
            end if; 
        end if;
    end process;

    i_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) then 
                i_0_reg_228 <= i_fu_323_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_228 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_412 <= i_1_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                i_2_reg_441 <= i_2_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln17_fu_351_p2 = ap_const_lv1_0))) then
                    zext_ln18_reg_417(5 downto 0) <= zext_ln18_fu_363_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln18_reg_417(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln58_fu_317_p2, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state3, icmp_ln17_fu_351_p2, ap_CS_fsm_state15, regslice_both_data_OUT_U_apdone_blk, icmp_ln68_fu_374_p2, grp_FFT0_fu_261_ap_done, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, data_IN_TVALID_int, data_OUT_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln58_fu_317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln17_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((grp_FFT0_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_FFT0_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_FFT0_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_FFT0_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_FFT0_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln68_fu_374_p2 = ap_const_lv1_1) and (regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln68_fu_374_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((data_OUT_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((data_OUT_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(icmp_ln58_fu_317_p2, data_IN_TVALID_int)
    begin
                ap_block_state2 <= ((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state15, regslice_both_data_OUT_U_apdone_blk, icmp_ln68_fu_374_p2)
    begin
        if (((icmp_ln68_fu_374_p2 = ap_const_lv1_1) and (regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, regslice_both_data_OUT_U_apdone_blk, icmp_ln68_fu_374_p2)
    begin
        if (((icmp_ln68_fu_374_p2 = ap_const_lv1_1) and (regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data_IN_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln58_fu_317_p2, data_IN_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) then 
            data_IN_TDATA_blk_n <= data_IN_TVALID_int;
        else 
            data_IN_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_IN_TREADY_assign_proc : process(data_IN_TVALID, regslice_both_data_IN_U_ack_in)
    begin
        if (((regslice_both_data_IN_U_ack_in = ap_const_logic_1) and (data_IN_TVALID = ap_const_logic_1))) then 
            data_IN_TREADY <= ap_const_logic_1;
        else 
            data_IN_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_IN_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln58_fu_317_p2, data_IN_TVALID_int)
    begin
        if ((not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) then 
            data_IN_TREADY_int <= ap_const_logic_1;
        else 
            data_IN_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_V_address0_assign_proc : process(zext_ln18_reg_417, grp_FFT0_fu_261_data_IN_M_imag_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_imag_V_address0 <= zext_ln18_reg_417(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_V_address0 <= grp_FFT0_fu_261_data_IN_M_imag_V_address0;
        else 
            data_OUT0_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_imag_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_imag_V_ce0 <= grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
        else 
            data_OUT0_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_imag_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_imag_V_we0 <= ap_const_logic_1;
        else 
            data_OUT0_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_V_address0_assign_proc : process(zext_ln18_reg_417, grp_FFT0_fu_261_data_IN_M_real_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_real_V_address0 <= zext_ln18_reg_417(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_V_address0 <= grp_FFT0_fu_261_data_IN_M_real_V_address0;
        else 
            data_OUT0_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT0_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_real_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT0_M_real_V_ce0 <= grp_FFT0_fu_261_data_IN_M_real_V_ce0;
        else 
            data_OUT0_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT0_M_real_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_OUT0_M_real_V_we0 <= ap_const_logic_1;
        else 
            data_OUT0_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_imag_V_address0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_address0, grp_FFT0_fu_261_data_OUT_M_imag_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT1_M_imag_V_address0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT1_M_imag_V_address0 <= grp_FFT0_fu_261_data_IN_M_imag_V_address0;
        else 
            data_OUT1_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT1_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_ce0, grp_FFT0_fu_261_data_OUT_M_imag_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT1_M_imag_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT1_M_imag_V_ce0 <= grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
        else 
            data_OUT1_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_imag_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT1_M_imag_V_we0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
        else 
            data_OUT1_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_real_V_address0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_address0, grp_FFT0_fu_261_data_OUT_M_real_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT1_M_real_V_address0 <= grp_FFT0_fu_261_data_OUT_M_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT1_M_real_V_address0 <= grp_FFT0_fu_261_data_IN_M_real_V_address0;
        else 
            data_OUT1_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT1_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_ce0, grp_FFT0_fu_261_data_OUT_M_real_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT1_M_real_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT1_M_real_V_ce0 <= grp_FFT0_fu_261_data_IN_M_real_V_ce0;
        else 
            data_OUT1_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT1_M_real_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_real_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_OUT1_M_real_V_we0 <= grp_FFT0_fu_261_data_OUT_M_real_V_we0;
        else 
            data_OUT1_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_imag_V_address0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_address0, grp_FFT0_fu_261_data_OUT_M_imag_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT2_M_imag_V_address0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT2_M_imag_V_address0 <= grp_FFT0_fu_261_data_IN_M_imag_V_address0;
        else 
            data_OUT2_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT2_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_ce0, grp_FFT0_fu_261_data_OUT_M_imag_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT2_M_imag_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT2_M_imag_V_ce0 <= grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
        else 
            data_OUT2_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_imag_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT2_M_imag_V_we0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
        else 
            data_OUT2_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_real_V_address0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_address0, grp_FFT0_fu_261_data_OUT_M_real_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT2_M_real_V_address0 <= grp_FFT0_fu_261_data_OUT_M_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT2_M_real_V_address0 <= grp_FFT0_fu_261_data_IN_M_real_V_address0;
        else 
            data_OUT2_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT2_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_ce0, grp_FFT0_fu_261_data_OUT_M_real_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT2_M_real_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT2_M_real_V_ce0 <= grp_FFT0_fu_261_data_IN_M_real_V_ce0;
        else 
            data_OUT2_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT2_M_real_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_real_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_OUT2_M_real_V_we0 <= grp_FFT0_fu_261_data_OUT_M_real_V_we0;
        else 
            data_OUT2_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_V_address0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_address0, grp_FFT0_fu_261_data_OUT_M_imag_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT3_M_imag_V_address0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT3_M_imag_V_address0 <= grp_FFT0_fu_261_data_IN_M_imag_V_address0;
        else 
            data_OUT3_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT3_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_ce0, grp_FFT0_fu_261_data_OUT_M_imag_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT3_M_imag_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT3_M_imag_V_ce0 <= grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
        else 
            data_OUT3_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_imag_V_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT3_M_imag_V_we0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
        else 
            data_OUT3_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_V_address0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_address0, grp_FFT0_fu_261_data_OUT_M_real_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT3_M_real_V_address0 <= grp_FFT0_fu_261_data_OUT_M_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT3_M_real_V_address0 <= grp_FFT0_fu_261_data_IN_M_real_V_address0;
        else 
            data_OUT3_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT3_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_ce0, grp_FFT0_fu_261_data_OUT_M_real_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT3_M_real_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT3_M_real_V_ce0 <= grp_FFT0_fu_261_data_IN_M_real_V_ce0;
        else 
            data_OUT3_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT3_M_real_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_real_V_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_OUT3_M_real_V_we0 <= grp_FFT0_fu_261_data_OUT_M_real_V_we0;
        else 
            data_OUT3_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_V_address0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_address0, grp_FFT0_fu_261_data_OUT_M_imag_V_address0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT4_M_imag_V_address0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_OUT4_M_imag_V_address0 <= grp_FFT0_fu_261_data_IN_M_imag_V_address0;
        else 
            data_OUT4_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT4_M_imag_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_imag_V_ce0, grp_FFT0_fu_261_data_OUT_M_imag_V_ce0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT4_M_imag_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_OUT4_M_imag_V_ce0 <= grp_FFT0_fu_261_data_IN_M_imag_V_ce0;
        else 
            data_OUT4_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_imag_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT4_M_imag_V_we0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
        else 
            data_OUT4_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_V_address0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_address0, grp_FFT0_fu_261_data_OUT_M_real_V_address0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT4_M_real_V_address0 <= grp_FFT0_fu_261_data_OUT_M_real_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_OUT4_M_real_V_address0 <= grp_FFT0_fu_261_data_IN_M_real_V_address0;
        else 
            data_OUT4_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT4_M_real_V_ce0_assign_proc : process(grp_FFT0_fu_261_data_IN_M_real_V_ce0, grp_FFT0_fu_261_data_OUT_M_real_V_ce0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT4_M_real_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_OUT4_M_real_V_ce0 <= grp_FFT0_fu_261_data_IN_M_real_V_ce0;
        else 
            data_OUT4_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_real_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_OUT4_M_real_V_we0 <= grp_FFT0_fu_261_data_OUT_M_real_V_we0;
        else 
            data_OUT4_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, data_OUT_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            data_OUT_TDATA_blk_n <= data_OUT_TREADY_int;
        else 
            data_OUT_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_OUT_TDATA_int <= (xout_M_imag_V_q0 & xout_M_real_V_q0);
    data_OUT_TVALID <= regslice_both_data_OUT_U_vld_out;

    data_OUT_TVALID_int_assign_proc : process(ap_CS_fsm_state16, data_OUT_TREADY_int)
    begin
        if (((data_OUT_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            data_OUT_TVALID_int <= ap_const_logic_1;
        else 
            data_OUT_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_FFT0_fu_261_FFT_stage_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_FFT0_fu_261_FFT_stage <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_FFT0_fu_261_FFT_stage <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_FFT0_fu_261_FFT_stage <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_FFT0_fu_261_FFT_stage <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_FFT0_fu_261_FFT_stage <= ap_const_lv6_1;
        else 
            grp_FFT0_fu_261_FFT_stage <= "XXXXXX";
        end if; 
    end process;

    grp_FFT0_fu_261_ap_start <= grp_FFT0_fu_261_ap_start_reg;

    grp_FFT0_fu_261_data_IN_M_imag_V_q0_assign_proc : process(data_OUT0_M_imag_V_q0, data_OUT1_M_imag_V_q0, data_OUT2_M_imag_V_q0, data_OUT3_M_imag_V_q0, data_OUT4_M_imag_V_q0, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_FFT0_fu_261_data_IN_M_imag_V_q0 <= data_OUT4_M_imag_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_FFT0_fu_261_data_IN_M_imag_V_q0 <= data_OUT3_M_imag_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_FFT0_fu_261_data_IN_M_imag_V_q0 <= data_OUT2_M_imag_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_FFT0_fu_261_data_IN_M_imag_V_q0 <= data_OUT1_M_imag_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_FFT0_fu_261_data_IN_M_imag_V_q0 <= data_OUT0_M_imag_V_q0;
        else 
            grp_FFT0_fu_261_data_IN_M_imag_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_261_data_IN_M_real_V_q0_assign_proc : process(data_OUT0_M_real_V_q0, data_OUT1_M_real_V_q0, data_OUT2_M_real_V_q0, data_OUT3_M_real_V_q0, data_OUT4_M_real_V_q0, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_FFT0_fu_261_data_IN_M_real_V_q0 <= data_OUT4_M_real_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_FFT0_fu_261_data_IN_M_real_V_q0 <= data_OUT3_M_real_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_FFT0_fu_261_data_IN_M_real_V_q0 <= data_OUT2_M_real_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_FFT0_fu_261_data_IN_M_real_V_q0 <= data_OUT1_M_real_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_FFT0_fu_261_data_IN_M_real_V_q0 <= data_OUT0_M_real_V_q0;
        else 
            grp_FFT0_fu_261_data_IN_M_real_V_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_261_index_shift_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_FFT0_fu_261_index_shift <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_FFT0_fu_261_index_shift <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_FFT0_fu_261_index_shift <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_FFT0_fu_261_index_shift <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_FFT0_fu_261_index_shift <= ap_const_lv4_4;
        else 
            grp_FFT0_fu_261_index_shift <= "XXXX";
        end if; 
    end process;


    grp_FFT0_fu_261_pass_check_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_FFT0_fu_261_pass_check <= ap_const_lv6_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_FFT0_fu_261_pass_check <= ap_const_lv6_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_FFT0_fu_261_pass_check <= ap_const_lv6_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_FFT0_fu_261_pass_check <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_FFT0_fu_261_pass_check <= ap_const_lv6_10;
        else 
            grp_FFT0_fu_261_pass_check <= "XXXXXX";
        end if; 
    end process;


    grp_FFT0_fu_261_pass_shift_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_FFT0_fu_261_pass_shift <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_FFT0_fu_261_pass_shift <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_FFT0_fu_261_pass_shift <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_FFT0_fu_261_pass_shift <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_FFT0_fu_261_pass_shift <= ap_const_lv4_1;
        else 
            grp_FFT0_fu_261_pass_shift <= "XXXX";
        end if; 
    end process;

    i_1_fu_357_p2 <= std_logic_vector(unsigned(i_0_i_reg_239) + unsigned(ap_const_lv6_1));
    i_2_fu_380_p2 <= std_logic_vector(unsigned(i1_0_reg_250) + unsigned(ap_const_lv6_1));
    i_fu_323_p2 <= std_logic_vector(unsigned(i_0_reg_228) + unsigned(ap_const_lv6_1));
    icmp_ln17_fu_351_p2 <= "1" when (i_0_i_reg_239 = ap_const_lv6_20) else "0";
    icmp_ln58_fu_317_p2 <= "1" when (i_0_reg_228 = ap_const_lv6_20) else "0";
    icmp_ln68_fu_374_p2 <= "1" when (i1_0_reg_250 = ap_const_lv6_20) else "0";
    rev_32_address0 <= zext_ln18_fu_363_p1(5 - 1 downto 0);

    rev_32_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rev_32_ce0 <= ap_const_logic_1;
        else 
            rev_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_imag_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln58_fu_329_p1, zext_ln19_fu_368_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            xin_M_imag_V_address0 <= zext_ln19_fu_368_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            xin_M_imag_V_address0 <= zext_ln58_fu_329_p1(5 - 1 downto 0);
        else 
            xin_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    xin_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln58_fu_317_p2, ap_CS_fsm_state4, data_IN_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            xin_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            xin_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_M_imag_V_d0 <= data_IN_TDATA_int(31 downto 16);

    xin_M_imag_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln58_fu_317_p2, data_IN_TVALID_int)
    begin
        if ((not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) then 
            xin_M_imag_V_we0 <= ap_const_logic_1;
        else 
            xin_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xin_M_real_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln58_fu_329_p1, zext_ln19_fu_368_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            xin_M_real_V_address0 <= zext_ln19_fu_368_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            xin_M_real_V_address0 <= zext_ln58_fu_329_p1(5 - 1 downto 0);
        else 
            xin_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    xin_M_real_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln58_fu_317_p2, ap_CS_fsm_state4, data_IN_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            xin_M_real_V_ce0 <= ap_const_logic_1;
        else 
            xin_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xin_M_real_V_d0 <= data_IN_TDATA_int(16 - 1 downto 0);

    xin_M_real_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln58_fu_317_p2, data_IN_TVALID_int)
    begin
        if ((not(((data_IN_TVALID_int = ap_const_logic_0) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln58_fu_317_p2 = ap_const_lv1_0))) then 
            xin_M_real_V_we0 <= ap_const_logic_1;
        else 
            xin_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_imag_V_address0_assign_proc : process(ap_CS_fsm_state15, grp_FFT0_fu_261_data_OUT_M_imag_V_address0, ap_CS_fsm_state14, zext_ln68_fu_386_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_imag_V_address0 <= zext_ln68_fu_386_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xout_M_imag_V_address0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_address0;
        else 
            xout_M_imag_V_address0 <= "XXXXX";
        end if; 
    end process;


    xout_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_state15, regslice_both_data_OUT_U_apdone_blk, grp_FFT0_fu_261_data_OUT_M_imag_V_ce0, ap_CS_fsm_state14)
    begin
        if (((regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            xout_M_imag_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xout_M_imag_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_ce0;
        else 
            xout_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_imag_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_imag_V_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xout_M_imag_V_we0 <= grp_FFT0_fu_261_data_OUT_M_imag_V_we0;
        else 
            xout_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_real_V_address0_assign_proc : process(ap_CS_fsm_state15, grp_FFT0_fu_261_data_OUT_M_real_V_address0, ap_CS_fsm_state14, zext_ln68_fu_386_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            xout_M_real_V_address0 <= zext_ln68_fu_386_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xout_M_real_V_address0 <= grp_FFT0_fu_261_data_OUT_M_real_V_address0;
        else 
            xout_M_real_V_address0 <= "XXXXX";
        end if; 
    end process;


    xout_M_real_V_ce0_assign_proc : process(ap_CS_fsm_state15, regslice_both_data_OUT_U_apdone_blk, grp_FFT0_fu_261_data_OUT_M_real_V_ce0, ap_CS_fsm_state14)
    begin
        if (((regslice_both_data_OUT_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            xout_M_real_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xout_M_real_V_ce0 <= grp_FFT0_fu_261_data_OUT_M_real_V_ce0;
        else 
            xout_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_real_V_we0_assign_proc : process(grp_FFT0_fu_261_data_OUT_M_real_V_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xout_M_real_V_we0 <= grp_FFT0_fu_261_data_OUT_M_real_V_we0;
        else 
            xout_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln18_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_239),64));
    zext_ln19_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev_32_q0),64));
    zext_ln58_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_228),64));
    zext_ln68_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_250),64));
end behav;
